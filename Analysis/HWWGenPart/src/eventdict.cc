//
// File generated by rootcint at Tue Mar 30 17:18:07 2010

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "eventdict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MyEvtId_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MyEvtId(void *p = 0);
   static void *newArray_MyEvtId(Long_t size, void *p);
   static void delete_MyEvtId(void *p);
   static void deleteArray_MyEvtId(void *p);
   static void destruct_MyEvtId(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyEvtId*)
   {
      ::MyEvtId *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyEvtId >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyEvtId", ::MyEvtId::Class_Version(), "/user/xjanssen/cms/HWW/CMSSW_3_2_8/src/Analysis/HWWGenPart/src/../../../Analysis/HWWGenPart/interface/MyEvtId.h", 9,
                  typeid(::MyEvtId), DefineBehavior(ptr, ptr),
                  &::MyEvtId::Dictionary, isa_proxy, 4,
                  sizeof(::MyEvtId) );
      instance.SetNew(&new_MyEvtId);
      instance.SetNewArray(&newArray_MyEvtId);
      instance.SetDelete(&delete_MyEvtId);
      instance.SetDeleteArray(&deleteArray_MyEvtId);
      instance.SetDestructor(&destruct_MyEvtId);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyEvtId*)
   {
      return GenerateInitInstanceLocal((::MyEvtId*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyEvtId*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyL1Trig_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MyL1Trig(void *p = 0);
   static void *newArray_MyL1Trig(Long_t size, void *p);
   static void delete_MyL1Trig(void *p);
   static void deleteArray_MyL1Trig(void *p);
   static void destruct_MyL1Trig(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyL1Trig*)
   {
      ::MyL1Trig *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyL1Trig >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyL1Trig", ::MyL1Trig::Class_Version(), "/user/xjanssen/cms/HWW/CMSSW_3_2_8/src/Analysis/HWWGenPart/src/../../../Analysis/HWWGenPart/interface/MyL1Trig.h", 7,
                  typeid(::MyL1Trig), DefineBehavior(ptr, ptr),
                  &::MyL1Trig::Dictionary, isa_proxy, 4,
                  sizeof(::MyL1Trig) );
      instance.SetNew(&new_MyL1Trig);
      instance.SetNewArray(&newArray_MyL1Trig);
      instance.SetDelete(&delete_MyL1Trig);
      instance.SetDeleteArray(&deleteArray_MyL1Trig);
      instance.SetDestructor(&destruct_MyL1Trig);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyL1Trig*)
   {
      return GenerateInitInstanceLocal((::MyL1Trig*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyL1Trig*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyPart_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MyPart(void *p = 0);
   static void *newArray_MyPart(Long_t size, void *p);
   static void delete_MyPart(void *p);
   static void deleteArray_MyPart(void *p);
   static void destruct_MyPart(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyPart*)
   {
      ::MyPart *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyPart >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyPart", ::MyPart::Class_Version(), "/user/xjanssen/cms/HWW/CMSSW_3_2_8/src/Analysis/HWWGenPart/src/../../../Analysis/HWWGenPart/interface/MyPart.h", 7,
                  typeid(::MyPart), DefineBehavior(ptr, ptr),
                  &::MyPart::Dictionary, isa_proxy, 4,
                  sizeof(::MyPart) );
      instance.SetNew(&new_MyPart);
      instance.SetNewArray(&newArray_MyPart);
      instance.SetDelete(&delete_MyPart);
      instance.SetDeleteArray(&deleteArray_MyPart);
      instance.SetDestructor(&destruct_MyPart);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyPart*)
   {
      return GenerateInitInstanceLocal((::MyPart*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyPart*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyGenKin_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MyGenKin(void *p = 0);
   static void *newArray_MyGenKin(Long_t size, void *p);
   static void delete_MyGenKin(void *p);
   static void deleteArray_MyGenKin(void *p);
   static void destruct_MyGenKin(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyGenKin*)
   {
      ::MyGenKin *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyGenKin >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyGenKin", ::MyGenKin::Class_Version(), "/user/xjanssen/cms/HWW/CMSSW_3_2_8/src/Analysis/HWWGenPart/src/../../../Analysis/HWWGenPart/interface/MyGenKin.h", 7,
                  typeid(::MyGenKin), DefineBehavior(ptr, ptr),
                  &::MyGenKin::Dictionary, isa_proxy, 4,
                  sizeof(::MyGenKin) );
      instance.SetNew(&new_MyGenKin);
      instance.SetNewArray(&newArray_MyGenKin);
      instance.SetDelete(&delete_MyGenKin);
      instance.SetDeleteArray(&deleteArray_MyGenKin);
      instance.SetDestructor(&destruct_MyGenKin);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyGenKin*)
   {
      return GenerateInitInstanceLocal((::MyGenKin*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyGenKin*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyGenPart_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MyGenPart(void *p = 0);
   static void *newArray_MyGenPart(Long_t size, void *p);
   static void delete_MyGenPart(void *p);
   static void deleteArray_MyGenPart(void *p);
   static void destruct_MyGenPart(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyGenPart*)
   {
      ::MyGenPart *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyGenPart >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyGenPart", ::MyGenPart::Class_Version(), "/user/xjanssen/cms/HWW/CMSSW_3_2_8/src/Analysis/HWWGenPart/src/../../../Analysis/HWWGenPart/interface/MyGenPart.h", 9,
                  typeid(::MyGenPart), DefineBehavior(ptr, ptr),
                  &::MyGenPart::Dictionary, isa_proxy, 4,
                  sizeof(::MyGenPart) );
      instance.SetNew(&new_MyGenPart);
      instance.SetNewArray(&newArray_MyGenPart);
      instance.SetDelete(&delete_MyGenPart);
      instance.SetDeleteArray(&deleteArray_MyGenPart);
      instance.SetDestructor(&destruct_MyGenPart);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyGenPart*)
   {
      return GenerateInitInstanceLocal((::MyGenPart*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyGenPart*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyGenJet_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MyGenJet(void *p = 0);
   static void *newArray_MyGenJet(Long_t size, void *p);
   static void delete_MyGenJet(void *p);
   static void deleteArray_MyGenJet(void *p);
   static void destruct_MyGenJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyGenJet*)
   {
      ::MyGenJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyGenJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyGenJet", ::MyGenJet::Class_Version(), "/user/xjanssen/cms/HWW/CMSSW_3_2_8/src/Analysis/HWWGenPart/src/../../../Analysis/HWWGenPart/interface/MyGenJet.h", 12,
                  typeid(::MyGenJet), DefineBehavior(ptr, ptr),
                  &::MyGenJet::Dictionary, isa_proxy, 4,
                  sizeof(::MyGenJet) );
      instance.SetNew(&new_MyGenJet);
      instance.SetNewArray(&newArray_MyGenJet);
      instance.SetDelete(&delete_MyGenJet);
      instance.SetDeleteArray(&deleteArray_MyGenJet);
      instance.SetDestructor(&destruct_MyGenJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyGenJet*)
   {
      return GenerateInitInstanceLocal((::MyGenJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyGenJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyBeamSpot_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MyBeamSpot(void *p = 0);
   static void *newArray_MyBeamSpot(Long_t size, void *p);
   static void delete_MyBeamSpot(void *p);
   static void deleteArray_MyBeamSpot(void *p);
   static void destruct_MyBeamSpot(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyBeamSpot*)
   {
      ::MyBeamSpot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyBeamSpot >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyBeamSpot", ::MyBeamSpot::Class_Version(), "/user/xjanssen/cms/HWW/CMSSW_3_2_8/src/Analysis/HWWGenPart/src/../../../Analysis/HWWGenPart/interface/MyBeamSpot.h", 6,
                  typeid(::MyBeamSpot), DefineBehavior(ptr, ptr),
                  &::MyBeamSpot::Dictionary, isa_proxy, 4,
                  sizeof(::MyBeamSpot) );
      instance.SetNew(&new_MyBeamSpot);
      instance.SetNewArray(&newArray_MyBeamSpot);
      instance.SetDelete(&delete_MyBeamSpot);
      instance.SetDeleteArray(&deleteArray_MyBeamSpot);
      instance.SetDestructor(&destruct_MyBeamSpot);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyBeamSpot*)
   {
      return GenerateInitInstanceLocal((::MyBeamSpot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyVertex_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MyVertex(void *p = 0);
   static void *newArray_MyVertex(Long_t size, void *p);
   static void delete_MyVertex(void *p);
   static void deleteArray_MyVertex(void *p);
   static void destruct_MyVertex(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyVertex*)
   {
      ::MyVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyVertex", ::MyVertex::Class_Version(), "/user/xjanssen/cms/HWW/CMSSW_3_2_8/src/Analysis/HWWGenPart/src/../../../Analysis/HWWGenPart/interface/MyVertex.h", 6,
                  typeid(::MyVertex), DefineBehavior(ptr, ptr),
                  &::MyVertex::Dictionary, isa_proxy, 4,
                  sizeof(::MyVertex) );
      instance.SetNew(&new_MyVertex);
      instance.SetNewArray(&newArray_MyVertex);
      instance.SetDelete(&delete_MyVertex);
      instance.SetDeleteArray(&deleteArray_MyVertex);
      instance.SetDestructor(&destruct_MyVertex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyVertex*)
   {
      return GenerateInitInstanceLocal((::MyVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyTracks_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MyTracks(void *p = 0);
   static void *newArray_MyTracks(Long_t size, void *p);
   static void delete_MyTracks(void *p);
   static void deleteArray_MyTracks(void *p);
   static void destruct_MyTracks(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyTracks*)
   {
      ::MyTracks *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyTracks >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyTracks", ::MyTracks::Class_Version(), "/user/xjanssen/cms/HWW/CMSSW_3_2_8/src/Analysis/HWWGenPart/src/../../../Analysis/HWWGenPart/interface/MyTracks.h", 8,
                  typeid(::MyTracks), DefineBehavior(ptr, ptr),
                  &::MyTracks::Dictionary, isa_proxy, 4,
                  sizeof(::MyTracks) );
      instance.SetNew(&new_MyTracks);
      instance.SetNewArray(&newArray_MyTracks);
      instance.SetDelete(&delete_MyTracks);
      instance.SetDeleteArray(&deleteArray_MyTracks);
      instance.SetDestructor(&destruct_MyTracks);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyTracks*)
   {
      return GenerateInitInstanceLocal((::MyTracks*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyTracks*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyElectron_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MyElectron(void *p = 0);
   static void *newArray_MyElectron(Long_t size, void *p);
   static void delete_MyElectron(void *p);
   static void deleteArray_MyElectron(void *p);
   static void destruct_MyElectron(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyElectron*)
   {
      ::MyElectron *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyElectron >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyElectron", ::MyElectron::Class_Version(), "/user/xjanssen/cms/HWW/CMSSW_3_2_8/src/Analysis/HWWGenPart/src/../../../Analysis/HWWGenPart/interface/MyElectron.h", 10,
                  typeid(::MyElectron), DefineBehavior(ptr, ptr),
                  &::MyElectron::Dictionary, isa_proxy, 4,
                  sizeof(::MyElectron) );
      instance.SetNew(&new_MyElectron);
      instance.SetNewArray(&newArray_MyElectron);
      instance.SetDelete(&delete_MyElectron);
      instance.SetDeleteArray(&deleteArray_MyElectron);
      instance.SetDestructor(&destruct_MyElectron);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyElectron*)
   {
      return GenerateInitInstanceLocal((::MyElectron*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyElectron*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MyMuon_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_MyMuon(void *p = 0);
   static void *newArray_MyMuon(Long_t size, void *p);
   static void delete_MyMuon(void *p);
   static void deleteArray_MyMuon(void *p);
   static void destruct_MyMuon(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MyMuon*)
   {
      ::MyMuon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MyMuon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MyMuon", ::MyMuon::Class_Version(), "/user/xjanssen/cms/HWW/CMSSW_3_2_8/src/Analysis/HWWGenPart/src/../../../Analysis/HWWGenPart/interface/MyMuon.h", 10,
                  typeid(::MyMuon), DefineBehavior(ptr, ptr),
                  &::MyMuon::Dictionary, isa_proxy, 4,
                  sizeof(::MyMuon) );
      instance.SetNew(&new_MyMuon);
      instance.SetNewArray(&newArray_MyMuon);
      instance.SetDelete(&delete_MyMuon);
      instance.SetDeleteArray(&deleteArray_MyMuon);
      instance.SetDestructor(&destruct_MyMuon);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MyMuon*)
   {
      return GenerateInitInstanceLocal((::MyMuon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MyMuon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MyEvtId::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyEvtId::Class_Name()
{
   return "MyEvtId";
}

//______________________________________________________________________________
const char *MyEvtId::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyEvtId::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyEvtId::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyEvtId::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyEvtId*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyL1Trig::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyL1Trig::Class_Name()
{
   return "MyL1Trig";
}

//______________________________________________________________________________
const char *MyL1Trig::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyL1Trig*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyL1Trig::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyL1Trig*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyL1Trig::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyL1Trig*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyL1Trig::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyL1Trig*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyPart::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyPart::Class_Name()
{
   return "MyPart";
}

//______________________________________________________________________________
const char *MyPart::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyPart::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyPart::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyPart::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyPart*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyGenKin::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyGenKin::Class_Name()
{
   return "MyGenKin";
}

//______________________________________________________________________________
const char *MyGenKin::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenKin*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyGenKin::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenKin*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyGenKin::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenKin*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyGenKin::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenKin*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyGenPart::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyGenPart::Class_Name()
{
   return "MyGenPart";
}

//______________________________________________________________________________
const char *MyGenPart::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyGenPart::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyGenPart::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyGenPart::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenPart*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyGenJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyGenJet::Class_Name()
{
   return "MyGenJet";
}

//______________________________________________________________________________
const char *MyGenJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyGenJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyGenJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyGenJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyGenJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyGenJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyBeamSpot::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyBeamSpot::Class_Name()
{
   return "MyBeamSpot";
}

//______________________________________________________________________________
const char *MyBeamSpot::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyBeamSpot::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyBeamSpot::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyBeamSpot::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyBeamSpot*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyVertex::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyVertex::Class_Name()
{
   return "MyVertex";
}

//______________________________________________________________________________
const char *MyVertex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyVertex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyVertex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyVertex::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyVertex*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyTracks::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyTracks::Class_Name()
{
   return "MyTracks";
}

//______________________________________________________________________________
const char *MyTracks::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyTracks*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyTracks::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyTracks*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyTracks::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyTracks*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyTracks::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyTracks*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyElectron::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyElectron::Class_Name()
{
   return "MyElectron";
}

//______________________________________________________________________________
const char *MyElectron::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyElectron*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyElectron::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyElectron*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyElectron::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyElectron*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyElectron::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyElectron*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MyMuon::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MyMuon::Class_Name()
{
   return "MyMuon";
}

//______________________________________________________________________________
const char *MyMuon::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyMuon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MyMuon::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MyMuon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MyMuon::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyMuon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MyMuon::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MyMuon*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MyEvtId::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyEvtId.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyEvtId::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyEvtId::Class(),this);
   }
}

//______________________________________________________________________________
void MyEvtId::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyEvtId.
      TClass *R__cl = ::MyEvtId::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "Run", &Run);
      R__insp.Inspect(R__cl, R__parent, "Evt", &Evt);
      R__insp.Inspect(R__cl, R__parent, "LumiSect", &LumiSect);
      R__insp.Inspect(R__cl, R__parent, "Time", &Time);
      R__insp.Inspect(R__cl, R__parent, "IsData", &IsData);
      R__insp.Inspect(R__cl, R__parent, "ExpType", &ExpType);
      R__insp.Inspect(R__cl, R__parent, "Bunch", &Bunch);
      R__insp.Inspect(R__cl, R__parent, "Orbit", &Orbit);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyEvtId(void *p) {
      return  p ? new(p) ::MyEvtId : new ::MyEvtId;
   }
   static void *newArray_MyEvtId(Long_t nElements, void *p) {
      return p ? new(p) ::MyEvtId[nElements] : new ::MyEvtId[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyEvtId(void *p) {
      delete ((::MyEvtId*)p);
   }
   static void deleteArray_MyEvtId(void *p) {
      delete [] ((::MyEvtId*)p);
   }
   static void destruct_MyEvtId(void *p) {
      typedef ::MyEvtId current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyEvtId

//______________________________________________________________________________
void MyL1Trig::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyL1Trig.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyL1Trig::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyL1Trig::Class(),this);
   }
}

//______________________________________________________________________________
void MyL1Trig::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyL1Trig.
      TClass *R__cl = ::MyL1Trig::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "PhysTrigWord[128]", PhysTrigWord);
      R__insp.Inspect(R__cl, R__parent, "TechTrigWord[64]", TechTrigWord);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyL1Trig(void *p) {
      return  p ? new(p) ::MyL1Trig : new ::MyL1Trig;
   }
   static void *newArray_MyL1Trig(Long_t nElements, void *p) {
      return p ? new(p) ::MyL1Trig[nElements] : new ::MyL1Trig[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyL1Trig(void *p) {
      delete ((::MyL1Trig*)p);
   }
   static void deleteArray_MyL1Trig(void *p) {
      delete [] ((::MyL1Trig*)p);
   }
   static void destruct_MyL1Trig(void *p) {
      typedef ::MyL1Trig current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyL1Trig

//______________________________________________________________________________
void MyPart::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyPart.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyPart::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyPart::Class(),this);
   }
}

//______________________________________________________________________________
void MyPart::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyPart.
      TClass *R__cl = ::MyPart::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "charge", &charge);
      R__insp.Inspect(R__cl, R__parent, "v", &v);
      v.ShowMembers(R__insp, strcat(R__parent,"v.")); R__parent[R__ncp] = 0;
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyPart(void *p) {
      return  p ? new(p) ::MyPart : new ::MyPart;
   }
   static void *newArray_MyPart(Long_t nElements, void *p) {
      return p ? new(p) ::MyPart[nElements] : new ::MyPart[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyPart(void *p) {
      delete ((::MyPart*)p);
   }
   static void deleteArray_MyPart(void *p) {
      delete [] ((::MyPart*)p);
   }
   static void destruct_MyPart(void *p) {
      typedef ::MyPart current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyPart

//______________________________________________________________________________
void MyGenKin::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyGenKin.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyGenKin::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyGenKin::Class(),this);
   }
}

//______________________________________________________________________________
void MyGenKin::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyGenKin.
      TClass *R__cl = ::MyGenKin::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "MCProcId", &MCProcId);
      R__insp.Inspect(R__cl, R__parent, "Scale", &Scale);
      R__insp.Inspect(R__cl, R__parent, "x1", &x1);
      R__insp.Inspect(R__cl, R__parent, "x2", &x2);
      R__insp.Inspect(R__cl, R__parent, "Q", &Q);
      R__insp.Inspect(R__cl, R__parent, "Part1Id", &Part1Id);
      R__insp.Inspect(R__cl, R__parent, "Part2Id", &Part2Id);
      R__insp.Inspect(R__cl, R__parent, "Met", &Met);
      R__insp.Inspect(R__cl, R__parent, "MetX", &MetX);
      R__insp.Inspect(R__cl, R__parent, "MetY", &MetY);
      R__insp.Inspect(R__cl, R__parent, "MetPhi", &MetPhi);
      R__insp.Inspect(R__cl, R__parent, "MetGP1", &MetGP1);
      MetGP1.ShowMembers(R__insp, strcat(R__parent,"MetGP1.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "MetGP3", &MetGP3);
      MetGP3.ShowMembers(R__insp, strcat(R__parent,"MetGP3.")); R__parent[R__ncp] = 0;
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyGenKin(void *p) {
      return  p ? new(p) ::MyGenKin : new ::MyGenKin;
   }
   static void *newArray_MyGenKin(Long_t nElements, void *p) {
      return p ? new(p) ::MyGenKin[nElements] : new ::MyGenKin[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyGenKin(void *p) {
      delete ((::MyGenKin*)p);
   }
   static void deleteArray_MyGenKin(void *p) {
      delete [] ((::MyGenKin*)p);
   }
   static void destruct_MyGenKin(void *p) {
      typedef ::MyGenKin current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyGenKin

//______________________________________________________________________________
void MyGenPart::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyGenPart.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyGenPart::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyGenPart::Class(),this);
   }
}

//______________________________________________________________________________
void MyGenPart::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyGenPart.
      TClass *R__cl = ::MyGenPart::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "pt", &pt);
      R__insp.Inspect(R__cl, R__parent, "eta", &eta);
      R__insp.Inspect(R__cl, R__parent, "phi", &phi);
      R__insp.Inspect(R__cl, R__parent, "charge", &charge);
      R__insp.Inspect(R__cl, R__parent, "e", &e);
      R__insp.Inspect(R__cl, R__parent, "px", &px);
      R__insp.Inspect(R__cl, R__parent, "py", &py);
      R__insp.Inspect(R__cl, R__parent, "pz", &pz);
      R__insp.Inspect(R__cl, R__parent, "m", &m);
      R__insp.Inspect(R__cl, R__parent, "v", &v);
      v.ShowMembers(R__insp, strcat(R__parent,"v.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "pdgId", &pdgId);
      R__insp.Inspect(R__cl, R__parent, "status", &status);
      R__insp.Inspect(R__cl, R__parent, "mo1", &mo1);
      R__insp.Inspect(R__cl, R__parent, "mo2", &mo2);
      R__insp.Inspect(R__cl, R__parent, "da1", &da1);
      R__insp.Inspect(R__cl, R__parent, "da2", &da2);
      R__insp.Inspect(R__cl, R__parent, "name", (void*)&name);
      ::ROOT::GenericShowMembers("string", (void*)&name, R__insp, strcat(R__parent,"name."),false);
      R__parent[R__ncp] = 0;
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyGenPart(void *p) {
      return  p ? new(p) ::MyGenPart : new ::MyGenPart;
   }
   static void *newArray_MyGenPart(Long_t nElements, void *p) {
      return p ? new(p) ::MyGenPart[nElements] : new ::MyGenPart[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyGenPart(void *p) {
      delete ((::MyGenPart*)p);
   }
   static void deleteArray_MyGenPart(void *p) {
      delete [] ((::MyGenPart*)p);
   }
   static void destruct_MyGenPart(void *p) {
      typedef ::MyGenPart current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyGenPart

//______________________________________________________________________________
void MyGenJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyGenJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyGenJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyGenJet::Class(),this);
   }
}

//______________________________________________________________________________
void MyGenJet::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyGenJet.
      TClass *R__cl = ::MyGenJet::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "et", &et);
      R__insp.Inspect(R__cl, R__parent, "pt", &pt);
      R__insp.Inspect(R__cl, R__parent, "eta", &eta);
      R__insp.Inspect(R__cl, R__parent, "phi", &phi);
      R__insp.Inspect(R__cl, R__parent, "e", &e);
      R__insp.Inspect(R__cl, R__parent, "px", &px);
      R__insp.Inspect(R__cl, R__parent, "py", &py);
      R__insp.Inspect(R__cl, R__parent, "pz", &pz);
      R__insp.Inspect(R__cl, R__parent, "npart", &npart);
      R__insp.Inspect(R__cl, R__parent, "JetPart", (void*)&JetPart);
      ::ROOT::GenericShowMembers("vector<MyGenPart>", (void*)&JetPart, R__insp, strcat(R__parent,"JetPart."),false);
      R__parent[R__ncp] = 0;
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyGenJet(void *p) {
      return  p ? new(p) ::MyGenJet : new ::MyGenJet;
   }
   static void *newArray_MyGenJet(Long_t nElements, void *p) {
      return p ? new(p) ::MyGenJet[nElements] : new ::MyGenJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyGenJet(void *p) {
      delete ((::MyGenJet*)p);
   }
   static void deleteArray_MyGenJet(void *p) {
      delete [] ((::MyGenJet*)p);
   }
   static void destruct_MyGenJet(void *p) {
      typedef ::MyGenJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyGenJet

//______________________________________________________________________________
void MyBeamSpot::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyBeamSpot.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyBeamSpot::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyBeamSpot::Class(),this);
   }
}

//______________________________________________________________________________
void MyBeamSpot::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyBeamSpot.
      TClass *R__cl = ::MyBeamSpot::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "x", &x);
      R__insp.Inspect(R__cl, R__parent, "y", &y);
      R__insp.Inspect(R__cl, R__parent, "z", &z);
      R__insp.Inspect(R__cl, R__parent, "ex", &ex);
      R__insp.Inspect(R__cl, R__parent, "ey", &ey);
      R__insp.Inspect(R__cl, R__parent, "ez", &ez);
      R__insp.Inspect(R__cl, R__parent, "sigmaZ", &sigmaZ);
      R__insp.Inspect(R__cl, R__parent, "dxdz", &dxdz);
      R__insp.Inspect(R__cl, R__parent, "dydz", &dydz);
      R__insp.Inspect(R__cl, R__parent, "esigmaZ", &esigmaZ);
      R__insp.Inspect(R__cl, R__parent, "edxdz", &edxdz);
      R__insp.Inspect(R__cl, R__parent, "edydz", &edydz);
      R__insp.Inspect(R__cl, R__parent, "BeamWidthX", &BeamWidthX);
      R__insp.Inspect(R__cl, R__parent, "BeamWidthY", &BeamWidthY);
      R__insp.Inspect(R__cl, R__parent, "eBeamWidthX", &eBeamWidthX);
      R__insp.Inspect(R__cl, R__parent, "eBeamWidthY", &eBeamWidthY);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyBeamSpot(void *p) {
      return  p ? new(p) ::MyBeamSpot : new ::MyBeamSpot;
   }
   static void *newArray_MyBeamSpot(Long_t nElements, void *p) {
      return p ? new(p) ::MyBeamSpot[nElements] : new ::MyBeamSpot[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyBeamSpot(void *p) {
      delete ((::MyBeamSpot*)p);
   }
   static void deleteArray_MyBeamSpot(void *p) {
      delete [] ((::MyBeamSpot*)p);
   }
   static void destruct_MyBeamSpot(void *p) {
      typedef ::MyBeamSpot current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyBeamSpot

//______________________________________________________________________________
void MyVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyVertex::Class(),this);
   }
}

//______________________________________________________________________________
void MyVertex::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyVertex.
      TClass *R__cl = ::MyVertex::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "id", &id);
      R__insp.Inspect(R__cl, R__parent, "x", &x);
      R__insp.Inspect(R__cl, R__parent, "y", &y);
      R__insp.Inspect(R__cl, R__parent, "z", &z);
      R__insp.Inspect(R__cl, R__parent, "ex", &ex);
      R__insp.Inspect(R__cl, R__parent, "ey", &ey);
      R__insp.Inspect(R__cl, R__parent, "ez", &ez);
      R__insp.Inspect(R__cl, R__parent, "validity", &validity);
      R__insp.Inspect(R__cl, R__parent, "fake", &fake);
      R__insp.Inspect(R__cl, R__parent, "chi2n", &chi2n);
      R__insp.Inspect(R__cl, R__parent, "ntracks", &ntracks);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyVertex(void *p) {
      return  p ? new(p) ::MyVertex : new ::MyVertex;
   }
   static void *newArray_MyVertex(Long_t nElements, void *p) {
      return p ? new(p) ::MyVertex[nElements] : new ::MyVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyVertex(void *p) {
      delete ((::MyVertex*)p);
   }
   static void deleteArray_MyVertex(void *p) {
      delete [] ((::MyVertex*)p);
   }
   static void destruct_MyVertex(void *p) {
      typedef ::MyVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyVertex

//______________________________________________________________________________
void MyTracks::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyTracks.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyTracks::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyTracks::Class(),this);
   }
}

//______________________________________________________________________________
void MyTracks::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyTracks.
      TClass *R__cl = ::MyTracks::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "Part", &Part);
      Part.ShowMembers(R__insp, strcat(R__parent,"Part.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "quality[3]", quality);
      R__insp.Inspect(R__cl, R__parent, "nhit", &nhit);
      R__insp.Inspect(R__cl, R__parent, "chi2n", &chi2n);
      R__insp.Inspect(R__cl, R__parent, "dz", &dz);
      R__insp.Inspect(R__cl, R__parent, "d0", &d0);
      R__insp.Inspect(R__cl, R__parent, "edz", &edz);
      R__insp.Inspect(R__cl, R__parent, "ed0", &ed0);
      R__insp.Inspect(R__cl, R__parent, "ept", &ept);
      R__insp.Inspect(R__cl, R__parent, "vx", &vx);
      R__insp.Inspect(R__cl, R__parent, "vy", &vy);
      R__insp.Inspect(R__cl, R__parent, "vz", &vz);
      R__insp.Inspect(R__cl, R__parent, "vtxid", (void*)&vtxid);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&vtxid, R__insp, strcat(R__parent,"vtxid."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "vtxdxy", (void*)&vtxdxy);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&vtxdxy, R__insp, strcat(R__parent,"vtxdxy."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "vtxdz", (void*)&vtxdz);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&vtxdz, R__insp, strcat(R__parent,"vtxdz."),false);
      R__parent[R__ncp] = 0;
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyTracks(void *p) {
      return  p ? new(p) ::MyTracks : new ::MyTracks;
   }
   static void *newArray_MyTracks(Long_t nElements, void *p) {
      return p ? new(p) ::MyTracks[nElements] : new ::MyTracks[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyTracks(void *p) {
      delete ((::MyTracks*)p);
   }
   static void deleteArray_MyTracks(void *p) {
      delete [] ((::MyTracks*)p);
   }
   static void destruct_MyTracks(void *p) {
      typedef ::MyTracks current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyTracks

//______________________________________________________________________________
void MyElectron::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyElectron.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyElectron::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyElectron::Class(),this);
   }
}

//______________________________________________________________________________
void MyElectron::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyElectron.
      TClass *R__cl = ::MyElectron::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "e", &e);
      R__insp.Inspect(R__cl, R__parent, "pt", &pt);
      R__insp.Inspect(R__cl, R__parent, "eta", &eta);
      R__insp.Inspect(R__cl, R__parent, "phi", &phi);
      R__insp.Inspect(R__cl, R__parent, "px", &px);
      R__insp.Inspect(R__cl, R__parent, "py", &py);
      R__insp.Inspect(R__cl, R__parent, "pz", &pz);
      R__insp.Inspect(R__cl, R__parent, "Part", &Part);
      Part.ShowMembers(R__insp, strcat(R__parent,"Part.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "GsfTrack", &GsfTrack);
      GsfTrack.ShowMembers(R__insp, strcat(R__parent,"GsfTrack.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "eSupClusOverP", &eSupClusOverP);
      R__insp.Inspect(R__cl, R__parent, "eSeedClusOverPout", &eSeedClusOverPout);
      R__insp.Inspect(R__cl, R__parent, "dEtaSupClusTrVtx", &dEtaSupClusTrVtx);
      R__insp.Inspect(R__cl, R__parent, "dEtaSeedClusTrCalo", &dEtaSeedClusTrCalo);
      R__insp.Inspect(R__cl, R__parent, "dPhiSupClusTrVtx", &dPhiSupClusTrVtx);
      R__insp.Inspect(R__cl, R__parent, "dPhiSeedClusTrCalo", &dPhiSeedClusTrCalo);
      R__insp.Inspect(R__cl, R__parent, "hadronicOverEm", &hadronicOverEm);
      R__insp.Inspect(R__cl, R__parent, "isEScaleCorr", &isEScaleCorr);
      R__insp.Inspect(R__cl, R__parent, "isMomentumCorr", &isMomentumCorr);
      R__insp.Inspect(R__cl, R__parent, "classification", &classification);
      R__insp.Inspect(R__cl, R__parent, "TrackerIsolationMajid", &TrackerIsolationMajid);
      R__insp.Inspect(R__cl, R__parent, "eidTight", &eidTight);
      R__insp.Inspect(R__cl, R__parent, "EcalJurassicIsolation", &EcalJurassicIsolation);
      R__insp.Inspect(R__cl, R__parent, "e3x3", &e3x3);
      R__insp.Inspect(R__cl, R__parent, "e5x5", &e5x5);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyElectron(void *p) {
      return  p ? new(p) ::MyElectron : new ::MyElectron;
   }
   static void *newArray_MyElectron(Long_t nElements, void *p) {
      return p ? new(p) ::MyElectron[nElements] : new ::MyElectron[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyElectron(void *p) {
      delete ((::MyElectron*)p);
   }
   static void deleteArray_MyElectron(void *p) {
      delete [] ((::MyElectron*)p);
   }
   static void destruct_MyElectron(void *p) {
      typedef ::MyElectron current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyElectron

//______________________________________________________________________________
void MyMuon::Streamer(TBuffer &R__b)
{
   // Stream an object of class MyMuon.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MyMuon::Class(),this);
   } else {
      R__b.WriteClassBuffer(MyMuon::Class(),this);
   }
}

//______________________________________________________________________________
void MyMuon::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class MyMuon.
      TClass *R__cl = ::MyMuon::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "Part", &Part);
      Part.ShowMembers(R__insp, strcat(R__parent,"Part.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "globalTrack", &globalTrack);
      globalTrack.ShowMembers(R__insp, strcat(R__parent,"globalTrack.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "innerTrack", &innerTrack);
      innerTrack.ShowMembers(R__insp, strcat(R__parent,"innerTrack.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "outerTrack", &outerTrack);
      outerTrack.ShowMembers(R__insp, strcat(R__parent,"outerTrack.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "isoR03sumPt", &isoR03sumPt);
      R__insp.Inspect(R__cl, R__parent, "isoR03emEt", &isoR03emEt);
      R__insp.Inspect(R__cl, R__parent, "isoR03hadEt", &isoR03hadEt);
      R__insp.Inspect(R__cl, R__parent, "isoR03hoEt", &isoR03hoEt);
      R__insp.Inspect(R__cl, R__parent, "isoR03nTracks", &isoR03nTracks);
      R__insp.Inspect(R__cl, R__parent, "isoR03nJets", &isoR03nJets);
      R__insp.Inspect(R__cl, R__parent, "isoR05sumPt", &isoR05sumPt);
      R__insp.Inspect(R__cl, R__parent, "isoR05emEt", &isoR05emEt);
      R__insp.Inspect(R__cl, R__parent, "isoR05hadEt", &isoR05hadEt);
      R__insp.Inspect(R__cl, R__parent, "isoR05hoEt", &isoR05hoEt);
      R__insp.Inspect(R__cl, R__parent, "isoR05nTracks", &isoR05nTracks);
      R__insp.Inspect(R__cl, R__parent, "isoR05nJets", &isoR05nJets);
      R__insp.Inspect(R__cl, R__parent, "calEnergyEm", &calEnergyEm);
      R__insp.Inspect(R__cl, R__parent, "calEnergyHad", &calEnergyHad);
      R__insp.Inspect(R__cl, R__parent, "calEnergyHo", &calEnergyHo);
      R__insp.Inspect(R__cl, R__parent, "calEnergyEmS9", &calEnergyEmS9);
      R__insp.Inspect(R__cl, R__parent, "calEnergyHadS9", &calEnergyHadS9);
      R__insp.Inspect(R__cl, R__parent, "calEnergyHoS9", &calEnergyHoS9);
      R__insp.Inspect(R__cl, R__parent, "TMOneStationLoose", &TMOneStationLoose);
      R__insp.Inspect(R__cl, R__parent, "TM2DCompatibilityLoose", &TM2DCompatibilityLoose);
      R__insp.Inspect(R__cl, R__parent, "PromptTight", &PromptTight);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MyMuon(void *p) {
      return  p ? new(p) ::MyMuon : new ::MyMuon;
   }
   static void *newArray_MyMuon(Long_t nElements, void *p) {
      return p ? new(p) ::MyMuon[nElements] : new ::MyMuon[nElements];
   }
   // Wrapper around operator delete
   static void delete_MyMuon(void *p) {
      delete ((::MyMuon*)p);
   }
   static void deleteArray_MyMuon(void *p) {
      delete [] ((::MyMuon*)p);
   }
   static void destruct_MyMuon(void *p) {
      typedef ::MyMuon current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MyMuon

namespace ROOT {
   void vectorlEMyElectrongR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEMyElectrongR_Dictionary();
   static void *new_vectorlEMyElectrongR(void *p = 0);
   static void *newArray_vectorlEMyElectrongR(Long_t size, void *p);
   static void delete_vectorlEMyElectrongR(void *p);
   static void deleteArray_vectorlEMyElectrongR(void *p);
   static void destruct_vectorlEMyElectrongR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyElectron>*)
   {
      vector<MyElectron> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyElectron>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyElectron>", -2, "/sandbox_mnt/sandbox/cmss/slc4_ia32_gcc345/lcg/root/5.22.00a-cms18/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyElectron>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyElectrongR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyElectron>) );
      instance.SetNew(&new_vectorlEMyElectrongR);
      instance.SetNewArray(&newArray_vectorlEMyElectrongR);
      instance.SetDelete(&delete_vectorlEMyElectrongR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyElectrongR);
      instance.SetDestructor(&destruct_vectorlEMyElectrongR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyElectron> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyElectron>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyElectrongR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyElectron>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyElectrongR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyElectron> : new vector<MyElectron>;
   }
   static void *newArray_vectorlEMyElectrongR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyElectron>[nElements] : new vector<MyElectron>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyElectrongR(void *p) {
      delete ((vector<MyElectron>*)p);
   }
   static void deleteArray_vectorlEMyElectrongR(void *p) {
      delete [] ((vector<MyElectron>*)p);
   }
   static void destruct_vectorlEMyElectrongR(void *p) {
      typedef vector<MyElectron> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyElectron>

namespace ROOT {
   void vectorlEMyGenJetgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEMyGenJetgR_Dictionary();
   static void *new_vectorlEMyGenJetgR(void *p = 0);
   static void *newArray_vectorlEMyGenJetgR(Long_t size, void *p);
   static void delete_vectorlEMyGenJetgR(void *p);
   static void deleteArray_vectorlEMyGenJetgR(void *p);
   static void destruct_vectorlEMyGenJetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyGenJet>*)
   {
      vector<MyGenJet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyGenJet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyGenJet>", -2, "/sandbox_mnt/sandbox/cmss/slc4_ia32_gcc345/lcg/root/5.22.00a-cms18/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyGenJet>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyGenJetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyGenJet>) );
      instance.SetNew(&new_vectorlEMyGenJetgR);
      instance.SetNewArray(&newArray_vectorlEMyGenJetgR);
      instance.SetDelete(&delete_vectorlEMyGenJetgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyGenJetgR);
      instance.SetDestructor(&destruct_vectorlEMyGenJetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyGenJet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyGenJet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyGenJetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyGenJet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyGenJetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenJet> : new vector<MyGenJet>;
   }
   static void *newArray_vectorlEMyGenJetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenJet>[nElements] : new vector<MyGenJet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyGenJetgR(void *p) {
      delete ((vector<MyGenJet>*)p);
   }
   static void deleteArray_vectorlEMyGenJetgR(void *p) {
      delete [] ((vector<MyGenJet>*)p);
   }
   static void destruct_vectorlEMyGenJetgR(void *p) {
      typedef vector<MyGenJet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyGenJet>

namespace ROOT {
   void vectorlEMyGenPartgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEMyGenPartgR_Dictionary();
   static void *new_vectorlEMyGenPartgR(void *p = 0);
   static void *newArray_vectorlEMyGenPartgR(Long_t size, void *p);
   static void delete_vectorlEMyGenPartgR(void *p);
   static void deleteArray_vectorlEMyGenPartgR(void *p);
   static void destruct_vectorlEMyGenPartgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyGenPart>*)
   {
      vector<MyGenPart> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyGenPart>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyGenPart>", -2, "/sandbox_mnt/sandbox/cmss/slc4_ia32_gcc345/lcg/root/5.22.00a-cms18/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyGenPart>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyGenPartgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyGenPart>) );
      instance.SetNew(&new_vectorlEMyGenPartgR);
      instance.SetNewArray(&newArray_vectorlEMyGenPartgR);
      instance.SetDelete(&delete_vectorlEMyGenPartgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyGenPartgR);
      instance.SetDestructor(&destruct_vectorlEMyGenPartgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyGenPart> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyGenPart>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyGenPartgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyGenPart>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyGenPartgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenPart> : new vector<MyGenPart>;
   }
   static void *newArray_vectorlEMyGenPartgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyGenPart>[nElements] : new vector<MyGenPart>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyGenPartgR(void *p) {
      delete ((vector<MyGenPart>*)p);
   }
   static void deleteArray_vectorlEMyGenPartgR(void *p) {
      delete [] ((vector<MyGenPart>*)p);
   }
   static void destruct_vectorlEMyGenPartgR(void *p) {
      typedef vector<MyGenPart> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyGenPart>

namespace ROOT {
   void vectorlEMyMuongR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEMyMuongR_Dictionary();
   static void *new_vectorlEMyMuongR(void *p = 0);
   static void *newArray_vectorlEMyMuongR(Long_t size, void *p);
   static void delete_vectorlEMyMuongR(void *p);
   static void deleteArray_vectorlEMyMuongR(void *p);
   static void destruct_vectorlEMyMuongR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyMuon>*)
   {
      vector<MyMuon> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyMuon>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyMuon>", -2, "/sandbox_mnt/sandbox/cmss/slc4_ia32_gcc345/lcg/root/5.22.00a-cms18/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyMuon>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyMuongR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyMuon>) );
      instance.SetNew(&new_vectorlEMyMuongR);
      instance.SetNewArray(&newArray_vectorlEMyMuongR);
      instance.SetDelete(&delete_vectorlEMyMuongR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyMuongR);
      instance.SetDestructor(&destruct_vectorlEMyMuongR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyMuon> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyMuon>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyMuongR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyMuon>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyMuongR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyMuon> : new vector<MyMuon>;
   }
   static void *newArray_vectorlEMyMuongR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyMuon>[nElements] : new vector<MyMuon>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyMuongR(void *p) {
      delete ((vector<MyMuon>*)p);
   }
   static void deleteArray_vectorlEMyMuongR(void *p) {
      delete [] ((vector<MyMuon>*)p);
   }
   static void destruct_vectorlEMyMuongR(void *p) {
      typedef vector<MyMuon> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyMuon>

namespace ROOT {
   void vectorlEMyTracksgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEMyTracksgR_Dictionary();
   static void *new_vectorlEMyTracksgR(void *p = 0);
   static void *newArray_vectorlEMyTracksgR(Long_t size, void *p);
   static void delete_vectorlEMyTracksgR(void *p);
   static void deleteArray_vectorlEMyTracksgR(void *p);
   static void destruct_vectorlEMyTracksgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyTracks>*)
   {
      vector<MyTracks> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyTracks>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyTracks>", -2, "/sandbox_mnt/sandbox/cmss/slc4_ia32_gcc345/lcg/root/5.22.00a-cms18/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyTracks>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyTracksgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyTracks>) );
      instance.SetNew(&new_vectorlEMyTracksgR);
      instance.SetNewArray(&newArray_vectorlEMyTracksgR);
      instance.SetDelete(&delete_vectorlEMyTracksgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyTracksgR);
      instance.SetDestructor(&destruct_vectorlEMyTracksgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyTracks> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyTracks>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyTracksgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyTracks>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyTracksgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyTracks> : new vector<MyTracks>;
   }
   static void *newArray_vectorlEMyTracksgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyTracks>[nElements] : new vector<MyTracks>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyTracksgR(void *p) {
      delete ((vector<MyTracks>*)p);
   }
   static void deleteArray_vectorlEMyTracksgR(void *p) {
      delete [] ((vector<MyTracks>*)p);
   }
   static void destruct_vectorlEMyTracksgR(void *p) {
      typedef vector<MyTracks> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyTracks>

namespace ROOT {
   void vectorlEMyVertexgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEMyVertexgR_Dictionary();
   static void *new_vectorlEMyVertexgR(void *p = 0);
   static void *newArray_vectorlEMyVertexgR(Long_t size, void *p);
   static void delete_vectorlEMyVertexgR(void *p);
   static void deleteArray_vectorlEMyVertexgR(void *p);
   static void destruct_vectorlEMyVertexgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MyVertex>*)
   {
      vector<MyVertex> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MyVertex>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MyVertex>", -2, "/sandbox_mnt/sandbox/cmss/slc4_ia32_gcc345/lcg/root/5.22.00a-cms18/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MyVertex>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMyVertexgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<MyVertex>) );
      instance.SetNew(&new_vectorlEMyVertexgR);
      instance.SetNewArray(&newArray_vectorlEMyVertexgR);
      instance.SetDelete(&delete_vectorlEMyVertexgR);
      instance.SetDeleteArray(&deleteArray_vectorlEMyVertexgR);
      instance.SetDestructor(&destruct_vectorlEMyVertexgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MyVertex> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MyVertex>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMyVertexgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MyVertex>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMyVertexgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyVertex> : new vector<MyVertex>;
   }
   static void *newArray_vectorlEMyVertexgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MyVertex>[nElements] : new vector<MyVertex>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMyVertexgR(void *p) {
      delete ((vector<MyVertex>*)p);
   }
   static void deleteArray_vectorlEMyVertexgR(void *p) {
      delete [] ((vector<MyVertex>*)p);
   }
   static void destruct_vectorlEMyVertexgR(void *p) {
      typedef vector<MyVertex> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MyVertex>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/sandbox_mnt/sandbox/cmss/slc4_ia32_gcc345/lcg/root/5.22.00a-cms18/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* eventdict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC_MINOR__ > 1)
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableeventdict();

extern "C" void G__set_cpp_environmenteventdict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("Analysis/HWWGenPart/interface/MyEvtId.h");
  G__add_compiledheader("Analysis/HWWGenPart/interface/MyL1Trig.h");
  G__add_compiledheader("Analysis/HWWGenPart/interface/MyPart.h");
  G__add_compiledheader("Analysis/HWWGenPart/interface/MyGenKin.h");
  G__add_compiledheader("Analysis/HWWGenPart/interface/MyGenPart.h");
  G__add_compiledheader("Analysis/HWWGenPart/interface/MyGenJet.h");
  G__add_compiledheader("Analysis/HWWGenPart/interface/MyBeamSpot.h");
  G__add_compiledheader("Analysis/HWWGenPart/interface/MyVertex.h");
  G__add_compiledheader("Analysis/HWWGenPart/interface/MyTracks.h");
  G__add_compiledheader("Analysis/HWWGenPart/interface/MyElectron.h");
  G__add_compiledheader("Analysis/HWWGenPart/interface/MyMuon.h");
  G__cpp_reset_tagtableeventdict();
}
#include <new>
extern "C" int G__cpp_dllreveventdict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MyEvtId */
static int G__eventdict_146_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyEvtId* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyEvtId[n];
     } else {
       p = new((void*) gvp) MyEvtId[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyEvtId;
     } else {
       p = new((void*) gvp) MyEvtId;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_146_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyEvtId*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_146_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyEvtId::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_146_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyEvtId::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_146_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyEvtId::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_146_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyEvtId::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_146_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyEvtId*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_146_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyEvtId::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_146_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyEvtId::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_146_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyEvtId::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_146_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyEvtId::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_146_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyEvtId* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyEvtId(*(MyEvtId*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyEvtId G__TMyEvtId;
static int G__eventdict_146_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyEvtId*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyEvtId*) (soff+(sizeof(MyEvtId)*i)))->~G__TMyEvtId();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyEvtId*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyEvtId*) (soff))->~G__TMyEvtId();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_146_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyEvtId* dest = (MyEvtId*) G__getstructoffset();
   *dest = *(MyEvtId*) libp->para[0].ref;
   const MyEvtId& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyL1Trig */
static int G__eventdict_147_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyL1Trig* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyL1Trig[n];
     } else {
       p = new((void*) gvp) MyL1Trig[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyL1Trig;
     } else {
       p = new((void*) gvp) MyL1Trig;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyL1Trig));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_147_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyL1Trig::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_147_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyL1Trig::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_147_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyL1Trig::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_147_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyL1Trig::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_147_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyL1Trig*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_147_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyL1Trig::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_147_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyL1Trig::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_147_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyL1Trig::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_147_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyL1Trig::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_147_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyL1Trig* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyL1Trig(*(MyL1Trig*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyL1Trig));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyL1Trig G__TMyL1Trig;
static int G__eventdict_147_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyL1Trig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyL1Trig*) (soff+(sizeof(MyL1Trig)*i)))->~G__TMyL1Trig();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyL1Trig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyL1Trig*) (soff))->~G__TMyL1Trig();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_147_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyL1Trig* dest = (MyL1Trig*) G__getstructoffset();
   *dest = *(MyL1Trig*) libp->para[0].ref;
   const MyL1Trig& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyPart */
static int G__eventdict_201_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyPart* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyPart[n];
     } else {
       p = new((void*) gvp) MyPart[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyPart;
     } else {
       p = new((void*) gvp) MyPart;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyPart));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_201_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((MyPart*) G__getstructoffset())->vmpi();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_201_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyPart::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_201_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPart::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_201_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyPart::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_201_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyPart::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_201_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyPart*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_201_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPart::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_201_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyPart::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_201_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyPart::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_201_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyPart::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_201_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyPart* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyPart(*(MyPart*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyPart));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyPart G__TMyPart;
static int G__eventdict_201_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyPart*) (soff+(sizeof(MyPart)*i)))->~G__TMyPart();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyPart*) (soff))->~G__TMyPart();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_201_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyPart* dest = (MyPart*) G__getstructoffset();
   *dest = *(MyPart*) libp->para[0].ref;
   const MyPart& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyGenKin */
static int G__eventdict_202_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenKin* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenKin[n];
     } else {
       p = new((void*) gvp) MyGenKin[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenKin;
     } else {
       p = new((void*) gvp) MyGenKin;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenKin));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_202_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyGenKin::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_202_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenKin::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_202_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyGenKin::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_202_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyGenKin::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_202_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenKin*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_202_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenKin::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_202_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenKin::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_202_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenKin::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_202_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenKin::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_202_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyGenKin* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyGenKin(*(MyGenKin*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenKin));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyGenKin G__TMyGenKin;
static int G__eventdict_202_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyGenKin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyGenKin*) (soff+(sizeof(MyGenKin)*i)))->~G__TMyGenKin();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyGenKin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyGenKin*) (soff))->~G__TMyGenKin();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_202_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenKin* dest = (MyGenKin*) G__getstructoffset();
   *dest = *(MyGenKin*) libp->para[0].ref;
   const MyGenKin& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyGenPart */
static int G__eventdict_203_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenPart* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenPart[n];
     } else {
       p = new((void*) gvp) MyGenPart[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenPart;
     } else {
       p = new((void*) gvp) MyGenPart;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_203_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyGenPart::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_203_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenPart::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_203_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyGenPart::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_203_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyGenPart::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_203_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenPart*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_203_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenPart::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_203_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenPart::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_203_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenPart::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_203_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenPart::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_203_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyGenPart* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyGenPart(*(MyGenPart*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyGenPart G__TMyGenPart;
static int G__eventdict_203_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyGenPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyGenPart*) (soff+(sizeof(MyGenPart)*i)))->~G__TMyGenPart();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyGenPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyGenPart*) (soff))->~G__TMyGenPart();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_203_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenPart* dest = (MyGenPart*) G__getstructoffset();
   *dest = *(MyGenPart*) libp->para[0].ref;
   const MyGenPart& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyGenJet */
static int G__eventdict_204_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenJet[n];
     } else {
       p = new((void*) gvp) MyGenJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyGenJet;
     } else {
       p = new((void*) gvp) MyGenJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_204_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyGenJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_204_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_204_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyGenJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_204_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyGenJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_204_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyGenJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_204_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_204_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_204_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyGenJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_204_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyGenJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_204_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyGenJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyGenJet(*(MyGenJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyGenJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyGenJet G__TMyGenJet;
static int G__eventdict_204_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyGenJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyGenJet*) (soff+(sizeof(MyGenJet)*i)))->~G__TMyGenJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyGenJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyGenJet*) (soff))->~G__TMyGenJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_204_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyGenJet* dest = (MyGenJet*) G__getstructoffset();
   *dest = *(MyGenJet*) libp->para[0].ref;
   const MyGenJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyGenPart,allocator<MyGenPart> > */
static int G__eventdict_206_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenPart& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->at((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->begin();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->end();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->rend();
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->resize((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->resize((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]), *((MyGenPart*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenPart& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->operator[]((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >[n];
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >;
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]), *(MyGenPart*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]), *(MyGenPart*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenPart,allocator<MyGenPart> >(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenPart,allocator<MyGenPart> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenPart,allocator<MyGenPart> >(*((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyGenPart,allocator<MyGenPart> >(*((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenPart,allocator<MyGenPart> >& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->operator=(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->reserve((vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenPart& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenPart& obj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->push_back(*(MyGenPart*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->swap(*(vector<MyGenPart,allocator<MyGenPart> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenPart,allocator<MyGenPart> >::iterator* pobj;
         vector<MyGenPart,allocator<MyGenPart> >::iterator xobj = ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->insert(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), *(MyGenPart*) libp->para[1].ref);
         pobj = new vector<MyGenPart,allocator<MyGenPart> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->insert(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyGenPart,allocator<MyGenPart> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->insert(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), (vector<MyGenPart,allocator<MyGenPart> >::size_type) G__int(libp->para[1])
, *(MyGenPart*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->erase(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->erase(*((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[0])), *((vector<MyGenPart,allocator<MyGenPart> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_206_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenPart,allocator<MyGenPart> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyGenPart,allocator<MyGenPart> > G__TvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR;
static int G__eventdict_206_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyGenPart,allocator<MyGenPart> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyGenPart,allocator<MyGenPart> >*) (soff+(sizeof(vector<MyGenPart,allocator<MyGenPart> >)*i)))->~G__TvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyGenPart,allocator<MyGenPart> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyGenPart,allocator<MyGenPart> >*) (soff))->~G__TvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyBeamSpot */
static int G__eventdict_209_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyBeamSpot* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyBeamSpot[n];
     } else {
       p = new((void*) gvp) MyBeamSpot[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyBeamSpot;
     } else {
       p = new((void*) gvp) MyBeamSpot;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_209_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyBeamSpot::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_209_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyBeamSpot::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_209_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyBeamSpot::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_209_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyBeamSpot::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_209_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyBeamSpot*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_209_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyBeamSpot::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_209_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyBeamSpot::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_209_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyBeamSpot::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_209_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyBeamSpot::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_209_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyBeamSpot* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyBeamSpot(*(MyBeamSpot*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyBeamSpot G__TMyBeamSpot;
static int G__eventdict_209_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyBeamSpot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyBeamSpot*) (soff+(sizeof(MyBeamSpot)*i)))->~G__TMyBeamSpot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyBeamSpot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyBeamSpot*) (soff))->~G__TMyBeamSpot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_209_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyBeamSpot* dest = (MyBeamSpot*) G__getstructoffset();
   *dest = *(MyBeamSpot*) libp->para[0].ref;
   const MyBeamSpot& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyVertex */
static int G__eventdict_210_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyVertex[n];
     } else {
       p = new((void*) gvp) MyVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyVertex;
     } else {
       p = new((void*) gvp) MyVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_210_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_210_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_210_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_210_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_210_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_210_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_210_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_210_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_210_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_210_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyVertex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyVertex(*(MyVertex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyVertex G__TMyVertex;
static int G__eventdict_210_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyVertex*) (soff+(sizeof(MyVertex)*i)))->~G__TMyVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyVertex*) (soff))->~G__TMyVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_210_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyVertex* dest = (MyVertex*) G__getstructoffset();
   *dest = *(MyVertex*) libp->para[0].ref;
   const MyVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyTracks */
static int G__eventdict_211_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyTracks* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyTracks[n];
     } else {
       p = new((void*) gvp) MyTracks[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyTracks;
     } else {
       p = new((void*) gvp) MyTracks;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyTracks));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_211_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyTracks::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_211_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTracks::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_211_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyTracks::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_211_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyTracks::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_211_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyTracks*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_211_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTracks::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_211_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyTracks::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_211_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyTracks::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_211_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyTracks::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_211_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyTracks* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyTracks(*(MyTracks*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyTracks));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyTracks G__TMyTracks;
static int G__eventdict_211_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyTracks*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyTracks*) (soff+(sizeof(MyTracks)*i)))->~G__TMyTracks();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyTracks*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyTracks*) (soff))->~G__TMyTracks();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_211_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyTracks* dest = (MyTracks*) G__getstructoffset();
   *dest = *(MyTracks*) libp->para[0].ref;
   const MyTracks& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyElectron */
static int G__eventdict_216_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyElectron* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyElectron[n];
     } else {
       p = new((void*) gvp) MyElectron[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyElectron;
     } else {
       p = new((void*) gvp) MyElectron;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyElectron));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_216_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyElectron::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_216_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyElectron::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_216_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyElectron::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_216_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyElectron::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_216_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyElectron*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_216_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyElectron::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_216_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyElectron::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_216_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyElectron::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_216_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyElectron::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_216_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyElectron* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyElectron(*(MyElectron*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyElectron));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyElectron G__TMyElectron;
static int G__eventdict_216_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyElectron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyElectron*) (soff+(sizeof(MyElectron)*i)))->~G__TMyElectron();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyElectron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyElectron*) (soff))->~G__TMyElectron();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_216_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyElectron* dest = (MyElectron*) G__getstructoffset();
   *dest = *(MyElectron*) libp->para[0].ref;
   const MyElectron& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MyMuon */
static int G__eventdict_217_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyMuon* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyMuon[n];
     } else {
       p = new((void*) gvp) MyMuon[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MyMuon;
     } else {
       p = new((void*) gvp) MyMuon;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyMuon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_217_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MyMuon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_217_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMuon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_217_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MyMuon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_217_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MyMuon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_217_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MyMuon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_217_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMuon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_217_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyMuon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_217_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MyMuon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_217_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MyMuon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__eventdict_217_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MyMuon* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MyMuon(*(MyMuon*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_MyMuon));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MyMuon G__TMyMuon;
static int G__eventdict_217_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MyMuon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MyMuon*) (soff+(sizeof(MyMuon)*i)))->~G__TMyMuon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MyMuon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MyMuon*) (soff))->~G__TMyMuon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__eventdict_217_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MyMuon* dest = (MyMuon*) G__getstructoffset();
   *dest = *(MyMuon*) libp->para[0].ref;
   const MyMuon& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyGenJet,allocator<MyGenJet> > */
static int G__eventdict_219_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenJet& obj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->at((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::iterator* pobj;
         vector<MyGenJet,allocator<MyGenJet> >::iterator xobj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->begin();
         pobj = new vector<MyGenJet,allocator<MyGenJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::iterator* pobj;
         vector<MyGenJet,allocator<MyGenJet> >::iterator xobj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->end();
         pobj = new vector<MyGenJet,allocator<MyGenJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator* pobj;
         vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator xobj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator* pobj;
         vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator xobj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->rend();
         pobj = new vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->resize((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->resize((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]), *((MyGenJet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenJet& obj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->operator[]((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenJet,allocator<MyGenJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenJet,allocator<MyGenJet> >[n];
     } else {
       p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenJet,allocator<MyGenJet> >;
     } else {
       p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenJet,allocator<MyGenJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenJet,allocator<MyGenJet> >((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]), *(MyGenJet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]), *(MyGenJet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyGenJet,allocator<MyGenJet> >((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenJet,allocator<MyGenJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenJet,allocator<MyGenJet> >(*(vector<MyGenJet,allocator<MyGenJet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >(*(vector<MyGenJet,allocator<MyGenJet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyGenJet,allocator<MyGenJet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyGenJet,allocator<MyGenJet> >(*((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyGenJet,allocator<MyGenJet> >(*((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[0])), *((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyGenJet,allocator<MyGenJet> >& obj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->operator=(*(vector<MyGenJet,allocator<MyGenJet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->reserve((vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenJet& obj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyGenJet& obj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->push_back(*(MyGenJet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->swap(*(vector<MyGenJet,allocator<MyGenJet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyGenJet,allocator<MyGenJet> >::iterator* pobj;
         vector<MyGenJet,allocator<MyGenJet> >::iterator xobj = ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->insert(*((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[0])), *(MyGenJet*) libp->para[1].ref);
         pobj = new vector<MyGenJet,allocator<MyGenJet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->insert(*((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[0])), *((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyGenJet,allocator<MyGenJet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->insert(*((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[0])), (vector<MyGenJet,allocator<MyGenJet> >::size_type) G__int(libp->para[1])
, *(MyGenJet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->erase(*((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->erase(*((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[0])), *((vector<MyGenJet,allocator<MyGenJet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_219_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyGenJet,allocator<MyGenJet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyGenJet,allocator<MyGenJet> > G__TvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR;
static int G__eventdict_219_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyGenJet,allocator<MyGenJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyGenJet,allocator<MyGenJet> >*) (soff+(sizeof(vector<MyGenJet,allocator<MyGenJet> >)*i)))->~G__TvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyGenJet,allocator<MyGenJet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyGenJet,allocator<MyGenJet> >*) (soff))->~G__TvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyVertex,allocator<MyVertex> > */
static int G__eventdict_223_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyVertex& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->at((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->begin();
         pobj = new vector<MyVertex,allocator<MyVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->end();
         pobj = new vector<MyVertex,allocator<MyVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyVertex,allocator<MyVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::reverse_iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->rend();
         pobj = new vector<MyVertex,allocator<MyVertex> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->resize((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->resize((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]), *((MyVertex*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyVertex& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->operator[]((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >[n];
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >;
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]), *(MyVertex*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]), *(MyVertex*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyVertex,allocator<MyVertex> >(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyVertex,allocator<MyVertex> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyVertex,allocator<MyVertex> >(*((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyVertex,allocator<MyVertex> >(*((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyVertex,allocator<MyVertex> >& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->operator=(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->reserve((vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyVertex& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyVertex& obj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->push_back(*(MyVertex*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->swap(*(vector<MyVertex,allocator<MyVertex> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyVertex,allocator<MyVertex> >::iterator* pobj;
         vector<MyVertex,allocator<MyVertex> >::iterator xobj = ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->insert(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), *(MyVertex*) libp->para[1].ref);
         pobj = new vector<MyVertex,allocator<MyVertex> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->insert(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyVertex,allocator<MyVertex> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->insert(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), (vector<MyVertex,allocator<MyVertex> >::size_type) G__int(libp->para[1])
, *(MyVertex*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->erase(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->erase(*((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[0])), *((vector<MyVertex,allocator<MyVertex> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_223_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyVertex,allocator<MyVertex> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyVertex,allocator<MyVertex> > G__TvectorlEMyVertexcOallocatorlEMyVertexgRsPgR;
static int G__eventdict_223_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyVertex,allocator<MyVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyVertex,allocator<MyVertex> >*) (soff+(sizeof(vector<MyVertex,allocator<MyVertex> >)*i)))->~G__TvectorlEMyVertexcOallocatorlEMyVertexgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyVertex,allocator<MyVertex> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyVertex,allocator<MyVertex> >*) (soff))->~G__TvectorlEMyVertexcOallocatorlEMyVertexgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyTracks,allocator<MyTracks> > */
static int G__eventdict_227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTracks& obj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->at((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTracks,allocator<MyTracks> >::iterator* pobj;
         vector<MyTracks,allocator<MyTracks> >::iterator xobj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->begin();
         pobj = new vector<MyTracks,allocator<MyTracks> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTracks,allocator<MyTracks> >::iterator* pobj;
         vector<MyTracks,allocator<MyTracks> >::iterator xobj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->end();
         pobj = new vector<MyTracks,allocator<MyTracks> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTracks,allocator<MyTracks> >::reverse_iterator* pobj;
         vector<MyTracks,allocator<MyTracks> >::reverse_iterator xobj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyTracks,allocator<MyTracks> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTracks,allocator<MyTracks> >::reverse_iterator* pobj;
         vector<MyTracks,allocator<MyTracks> >::reverse_iterator xobj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->rend();
         pobj = new vector<MyTracks,allocator<MyTracks> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->resize((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->resize((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]), *((MyTracks*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTracks& obj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->operator[]((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTracks,allocator<MyTracks> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTracks,allocator<MyTracks> >[n];
     } else {
       p = new((void*) gvp) vector<MyTracks,allocator<MyTracks> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTracks,allocator<MyTracks> >;
     } else {
       p = new((void*) gvp) vector<MyTracks,allocator<MyTracks> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTracks,allocator<MyTracks> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTracks,allocator<MyTracks> >((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]), *(MyTracks*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyTracks,allocator<MyTracks> >((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]), *(MyTracks*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyTracks,allocator<MyTracks> >((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyTracks,allocator<MyTracks> >((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTracks,allocator<MyTracks> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyTracks,allocator<MyTracks> >(*(vector<MyTracks,allocator<MyTracks> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyTracks,allocator<MyTracks> >(*(vector<MyTracks,allocator<MyTracks> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyTracks,allocator<MyTracks> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyTracks,allocator<MyTracks> >(*((vector<MyTracks,allocator<MyTracks> >::const_iterator*) G__int(libp->para[0])), *((vector<MyTracks,allocator<MyTracks> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyTracks,allocator<MyTracks> >(*((vector<MyTracks,allocator<MyTracks> >::const_iterator*) G__int(libp->para[0])), *((vector<MyTracks,allocator<MyTracks> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyTracks,allocator<MyTracks> >& obj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->operator=(*(vector<MyTracks,allocator<MyTracks> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->reserve((vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTracks& obj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyTracks& obj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->push_back(*(MyTracks*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->swap(*(vector<MyTracks,allocator<MyTracks> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyTracks,allocator<MyTracks> >::iterator* pobj;
         vector<MyTracks,allocator<MyTracks> >::iterator xobj = ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->insert(*((vector<MyTracks,allocator<MyTracks> >::iterator*) G__int(libp->para[0])), *(MyTracks*) libp->para[1].ref);
         pobj = new vector<MyTracks,allocator<MyTracks> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->insert(*((vector<MyTracks,allocator<MyTracks> >::iterator*) G__int(libp->para[0])), *((vector<MyTracks,allocator<MyTracks> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyTracks,allocator<MyTracks> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->insert(*((vector<MyTracks,allocator<MyTracks> >::iterator*) G__int(libp->para[0])), (vector<MyTracks,allocator<MyTracks> >::size_type) G__int(libp->para[1])
, *(MyTracks*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->erase(*((vector<MyTracks,allocator<MyTracks> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->erase(*((vector<MyTracks,allocator<MyTracks> >::iterator*) G__int(libp->para[0])), *((vector<MyTracks,allocator<MyTracks> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_227_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyTracks,allocator<MyTracks> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyTracks,allocator<MyTracks> > G__TvectorlEMyTrackscOallocatorlEMyTracksgRsPgR;
static int G__eventdict_227_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyTracks,allocator<MyTracks> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyTracks,allocator<MyTracks> >*) (soff+(sizeof(vector<MyTracks,allocator<MyTracks> >)*i)))->~G__TvectorlEMyTrackscOallocatorlEMyTracksgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyTracks,allocator<MyTracks> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyTracks,allocator<MyTracks> >*) (soff))->~G__TvectorlEMyTrackscOallocatorlEMyTracksgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyElectron,allocator<MyElectron> > */
static int G__eventdict_231_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyElectron& obj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->at((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::iterator* pobj;
         vector<MyElectron,allocator<MyElectron> >::iterator xobj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->begin();
         pobj = new vector<MyElectron,allocator<MyElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::iterator* pobj;
         vector<MyElectron,allocator<MyElectron> >::iterator xobj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->end();
         pobj = new vector<MyElectron,allocator<MyElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::reverse_iterator* pobj;
         vector<MyElectron,allocator<MyElectron> >::reverse_iterator xobj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyElectron,allocator<MyElectron> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::reverse_iterator* pobj;
         vector<MyElectron,allocator<MyElectron> >::reverse_iterator xobj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->rend();
         pobj = new vector<MyElectron,allocator<MyElectron> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->resize((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->resize((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]), *((MyElectron*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyElectron& obj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->operator[]((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyElectron,allocator<MyElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyElectron,allocator<MyElectron> >[n];
     } else {
       p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyElectron,allocator<MyElectron> >;
     } else {
       p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyElectron,allocator<MyElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyElectron,allocator<MyElectron> >((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]), *(MyElectron*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]), *(MyElectron*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyElectron,allocator<MyElectron> >((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyElectron,allocator<MyElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyElectron,allocator<MyElectron> >(*(vector<MyElectron,allocator<MyElectron> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >(*(vector<MyElectron,allocator<MyElectron> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyElectron,allocator<MyElectron> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyElectron,allocator<MyElectron> >(*((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[0])), *((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyElectron,allocator<MyElectron> >(*((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[0])), *((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyElectron,allocator<MyElectron> >& obj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->operator=(*(vector<MyElectron,allocator<MyElectron> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->reserve((vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyElectron& obj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyElectron& obj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->push_back(*(MyElectron*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->swap(*(vector<MyElectron,allocator<MyElectron> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyElectron,allocator<MyElectron> >::iterator* pobj;
         vector<MyElectron,allocator<MyElectron> >::iterator xobj = ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->insert(*((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[0])), *(MyElectron*) libp->para[1].ref);
         pobj = new vector<MyElectron,allocator<MyElectron> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->insert(*((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[0])), *((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyElectron,allocator<MyElectron> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->insert(*((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[0])), (vector<MyElectron,allocator<MyElectron> >::size_type) G__int(libp->para[1])
, *(MyElectron*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->erase(*((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->erase(*((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[0])), *((vector<MyElectron,allocator<MyElectron> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_231_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyElectron,allocator<MyElectron> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyElectron,allocator<MyElectron> > G__TvectorlEMyElectroncOallocatorlEMyElectrongRsPgR;
static int G__eventdict_231_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyElectron,allocator<MyElectron> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyElectron,allocator<MyElectron> >*) (soff+(sizeof(vector<MyElectron,allocator<MyElectron> >)*i)))->~G__TvectorlEMyElectroncOallocatorlEMyElectrongRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyElectron,allocator<MyElectron> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyElectron,allocator<MyElectron> >*) (soff))->~G__TvectorlEMyElectroncOallocatorlEMyElectrongRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<MyMuon,allocator<MyMuon> > */
static int G__eventdict_235_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMuon& obj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->at((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::iterator* pobj;
         vector<MyMuon,allocator<MyMuon> >::iterator xobj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->begin();
         pobj = new vector<MyMuon,allocator<MyMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::iterator* pobj;
         vector<MyMuon,allocator<MyMuon> >::iterator xobj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->end();
         pobj = new vector<MyMuon,allocator<MyMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::reverse_iterator* pobj;
         vector<MyMuon,allocator<MyMuon> >::reverse_iterator xobj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->rbegin();
         pobj = new vector<MyMuon,allocator<MyMuon> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::reverse_iterator* pobj;
         vector<MyMuon,allocator<MyMuon> >::reverse_iterator xobj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->rend();
         pobj = new vector<MyMuon,allocator<MyMuon> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->resize((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->resize((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]), *((MyMuon*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMuon& obj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->operator[]((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMuon,allocator<MyMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMuon,allocator<MyMuon> >[n];
     } else {
       p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMuon,allocator<MyMuon> >;
     } else {
       p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMuon,allocator<MyMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMuon,allocator<MyMuon> >((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]), *(MyMuon*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]), *(MyMuon*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<MyMuon,allocator<MyMuon> >((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMuon,allocator<MyMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyMuon,allocator<MyMuon> >(*(vector<MyMuon,allocator<MyMuon> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >(*(vector<MyMuon,allocator<MyMuon> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<MyMuon,allocator<MyMuon> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<MyMuon,allocator<MyMuon> >(*((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[0])), *((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<MyMuon,allocator<MyMuon> >(*((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[0])), *((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<MyMuon,allocator<MyMuon> >& obj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->operator=(*(vector<MyMuon,allocator<MyMuon> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->reserve((vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMuon& obj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MyMuon& obj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->push_back(*(MyMuon*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->swap(*(vector<MyMuon,allocator<MyMuon> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<MyMuon,allocator<MyMuon> >::iterator* pobj;
         vector<MyMuon,allocator<MyMuon> >::iterator xobj = ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->insert(*((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[0])), *(MyMuon*) libp->para[1].ref);
         pobj = new vector<MyMuon,allocator<MyMuon> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->insert(*((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[0])), *((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[1]))
, *((vector<MyMuon,allocator<MyMuon> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->insert(*((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[0])), (vector<MyMuon,allocator<MyMuon> >::size_type) G__int(libp->para[1])
, *(MyMuon*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->erase(*((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->erase(*((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[0])), *((vector<MyMuon,allocator<MyMuon> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__eventdict_235_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<MyMuon,allocator<MyMuon> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<MyMuon,allocator<MyMuon> > G__TvectorlEMyMuoncOallocatorlEMyMuongRsPgR;
static int G__eventdict_235_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<MyMuon,allocator<MyMuon> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<MyMuon,allocator<MyMuon> >*) (soff+(sizeof(vector<MyMuon,allocator<MyMuon> >)*i)))->~G__TvectorlEMyMuoncOallocatorlEMyMuongRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<MyMuon,allocator<MyMuon> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<MyMuon,allocator<MyMuon> >*) (soff))->~G__TvectorlEMyMuoncOallocatorlEMyMuongRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MyEvtId */

/* MyL1Trig */

/* MyPart */

/* MyGenKin */

/* MyGenPart */

/* MyGenJet */

/* vector<MyGenPart,allocator<MyGenPart> > */

/* MyBeamSpot */

/* MyVertex */

/* MyTracks */

/* MyElectron */

/* MyMuon */

/* vector<MyGenJet,allocator<MyGenJet> > */

/* vector<MyVertex,allocator<MyVertex> > */

/* vector<MyTracks,allocator<MyTracks> > */

/* vector<MyElectron,allocator<MyElectron> > */

/* vector<MyMuon,allocator<MyMuon> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunceventdict {
 public:
  G__Sizep2memfunceventdict(): p(&G__Sizep2memfunceventdict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunceventdict::*p)();
};

size_t G__get_sizep2memfunceventdict()
{
  G__Sizep2memfunceventdict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceeventdict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyEvtId))) {
     MyEvtId *G__Lderived;
     G__Lderived=(MyEvtId*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyEvtId),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyL1Trig))) {
     MyL1Trig *G__Lderived;
     G__Lderived=(MyL1Trig*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyL1Trig),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyPart))) {
     MyPart *G__Lderived;
     G__Lderived=(MyPart*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyGenKin))) {
     MyGenKin *G__Lderived;
     G__Lderived=(MyGenKin*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenKin),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyGenPart))) {
     MyGenPart *G__Lderived;
     G__Lderived=(MyGenPart*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyGenJet))) {
     MyGenJet *G__Lderived;
     G__Lderived=(MyGenJet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenJet),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot))) {
     MyBeamSpot *G__Lderived;
     G__Lderived=(MyBeamSpot*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyVertex))) {
     MyVertex *G__Lderived;
     G__Lderived=(MyVertex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyVertex),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyTracks))) {
     MyTracks *G__Lderived;
     G__Lderived=(MyTracks*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyTracks),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyElectron))) {
     MyElectron *G__Lderived;
     G__Lderived=(MyElectron*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyElectron),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__eventdictLN_MyMuon))) {
     MyMuon *G__Lderived;
     G__Lderived=(MyMuon*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__eventdictLN_MyMuon),G__get_linked_tagnum(&G__eventdictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableeventdict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__eventdictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyGenPart>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenPart),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyGenJet>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyGenJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenJet),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyGenJet),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenJet),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyGenJet),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyVertex>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyVertex),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyVertex),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyVertex),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyVertex),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyTracks>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyTracks),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyTracks),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyTracks),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyTracks),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyTracks),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyElectron>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyElectron),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyElectron),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyElectron),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyElectron),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyElectron),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MyMuon>",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__eventdictLN_MyMuon),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyMuon),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__eventdictLN_MyMuon),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__eventdictLN_MyMuon),1,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__eventdictLN_MyMuon),257,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MyEvtId */
static void G__setup_memvarMyEvtId(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   { MyEvtId *p; p=(MyEvtId*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Run)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"Run=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Evt)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"Evt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LumiSect)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"LumiSect=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),109,0,0,-1,G__defined_typename("TimeValue_t"),-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsData)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IsData=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ExpType)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"ExpType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Bunch)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Bunch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Orbit)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Orbit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyL1Trig */
static void G__setup_memvarMyL1Trig(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyL1Trig));
   { MyL1Trig *p; p=(MyL1Trig*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->PhysTrigWord)-(long)(p)),103,0,0,-1,-1,-1,1,"PhysTrigWord[128]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TechTrigWord)-(long)(p)),103,0,0,-1,-1,-1,1,"TechTrigWord[64]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyPart */
static void G__setup_memvarMyPart(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart));
   { MyPart *p; p=(MyPart*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->v)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),-1,-1,1,"v=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyGenKin */
static void G__setup_memvarMyGenKin(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenKin));
   { MyGenKin *p; p=(MyGenKin*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->MCProcId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"MCProcId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Scale)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Scale=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x1)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Q)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Q=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Part1Id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Part1Id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Part2Id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Part2Id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Met)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Met=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MetX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"MetX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MetY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"MetY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MetPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"MetPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MetGP1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),-1,-1,1,"MetGP1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MetGP3)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),-1,-1,1,"MetGP3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyGenPart */
static void G__setup_memvarMyGenPart(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   { MyGenPart *p; p=(MyGenPart*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"px=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"py=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"m=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->v)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_TLorentzVector),-1,-1,1,"v=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdgId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mo1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mo1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mo2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mo2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->da1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"da1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->da2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"da2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->name)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_string),-1,-1,1,"name=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyGenJet */
static void G__setup_memvarMyGenJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenJet));
   { MyGenJet *p; p=(MyGenJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->et)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"et=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"px=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"py=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->npart)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"npart=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JetPart)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR),G__defined_typename("vector<MyGenPart>"),-1,1,"JetPart=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<MyGenPart,allocator<MyGenPart> > */
static void G__setup_memvarvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   { vector<MyGenPart,allocator<MyGenPart> > *p; p=(vector<MyGenPart,allocator<MyGenPart> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* MyBeamSpot */
static void G__setup_memvarMyBeamSpot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   { MyBeamSpot *p; p=(MyBeamSpot*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ex)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ey)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ey=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ez)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ez=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sigmaZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxdz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dxdz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dydz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dydz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->esigmaZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"esigmaZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->edxdz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"edxdz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->edydz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"edydz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BeamWidthX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"BeamWidthX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BeamWidthY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"BeamWidthY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eBeamWidthX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eBeamWidthX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eBeamWidthY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eBeamWidthY=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyVertex */
static void G__setup_memvarMyVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   { MyVertex *p; p=(MyVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ex)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ey)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ey=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ez)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ez=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->validity)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"validity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fake)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fake=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2n)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"chi2n=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntracks)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyTracks */
static void G__setup_memvarMyTracks(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyTracks));
   { MyTracks *p; p=(MyTracks*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Part)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_MyPart),-1,-1,1,"Part=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->quality)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"quality[3]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nhit)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nhit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2n)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"chi2n=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"d0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->edz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"edz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ed0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ed0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ept)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ept=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"vx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"vy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"vz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxid)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"vtxid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxdxy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"vtxdxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxdz)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"vtxdz=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyElectron */
static void G__setup_memvarMyElectron(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyElectron));
   { MyElectron *p; p=(MyElectron*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->e)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->px)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"px=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->py)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"py=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Part)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_MyPart),-1,-1,1,"Part=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->GsfTrack)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_MyTracks),-1,-1,1,"GsfTrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSupClusOverP)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eSupClusOverP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSeedClusOverPout)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"eSeedClusOverPout=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dEtaSupClusTrVtx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dEtaSupClusTrVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dEtaSeedClusTrCalo)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dEtaSeedClusTrCalo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dPhiSupClusTrVtx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dPhiSupClusTrVtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dPhiSeedClusTrCalo)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dPhiSeedClusTrCalo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hadronicOverEm)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"hadronicOverEm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isEScaleCorr)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isEScaleCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isMomentumCorr)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"isMomentumCorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->classification)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"classification=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrackerIsolationMajid)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"TrackerIsolationMajid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eidTight)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eidTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EcalJurassicIsolation)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"EcalJurassicIsolation=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e3x3)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"e3x3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e5x5)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"e5x5=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MyMuon */
static void G__setup_memvarMyMuon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_MyMuon));
   { MyMuon *p; p=(MyMuon*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Part)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_MyPart),-1,-1,1,"Part=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalTrack)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_MyTracks),-1,-1,1,"globalTrack=",0,"Track reconstructed in both tracked and muon detector");
   G__memvar_setup((void*)((long)(&p->innerTrack)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_MyTracks),-1,-1,1,"innerTrack=",0,"Track reconstructed in the tracker only");
   G__memvar_setup((void*)((long)(&p->outerTrack)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__eventdictLN_MyTracks),-1,-1,1,"outerTrack=",0,"Track reconstructed in the muon detector only");
   G__memvar_setup((void*)((long)(&p->isoR03sumPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR03sumPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR03emEt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR03emEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR03hadEt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR03hadEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR03hoEt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR03hoEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR03nTracks)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isoR03nTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR03nJets)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isoR03nJets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR05sumPt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR05sumPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR05emEt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR05emEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR05hadEt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR05hadEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR05hoEt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"isoR05hoEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR05nTracks)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isoR05nTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isoR05nJets)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isoR05nJets=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyEm)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"calEnergyEm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyHad)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"calEnergyHad=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyHo)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"calEnergyHo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyEmS9)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"calEnergyEmS9=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyHadS9)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"calEnergyHadS9=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calEnergyHoS9)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"calEnergyHoS9=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TMOneStationLoose)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TMOneStationLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TM2DCompatibilityLoose)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TM2DCompatibilityLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PromptTight)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"PromptTight=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__eventdictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<MyGenJet,allocator<MyGenJet> > */
static void G__setup_memvarvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   { vector<MyGenJet,allocator<MyGenJet> > *p; p=(vector<MyGenJet,allocator<MyGenJet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyVertex,allocator<MyVertex> > */
static void G__setup_memvarvectorlEMyVertexcOallocatorlEMyVertexgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   { vector<MyVertex,allocator<MyVertex> > *p; p=(vector<MyVertex,allocator<MyVertex> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyTracks,allocator<MyTracks> > */
static void G__setup_memvarvectorlEMyTrackscOallocatorlEMyTracksgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   { vector<MyTracks,allocator<MyTracks> > *p; p=(vector<MyTracks,allocator<MyTracks> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyElectron,allocator<MyElectron> > */
static void G__setup_memvarvectorlEMyElectroncOallocatorlEMyElectrongRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   { vector<MyElectron,allocator<MyElectron> > *p; p=(vector<MyElectron,allocator<MyElectron> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<MyMuon,allocator<MyMuon> > */
static void G__setup_memvarvectorlEMyMuoncOallocatorlEMyMuongRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   { vector<MyMuon,allocator<MyMuon> > *p; p=(vector<MyMuon,allocator<MyMuon> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvareventdict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMyEvtId(void) {
   /* MyEvtId */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyEvtId));
   G__memfunc_setup("MyEvtId",674,G__eventdict_146_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyEvtId), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__eventdict_146_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_146_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MyEvtId::Class), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_146_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyEvtId::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_146_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MyEvtId::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_146_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MyEvtId::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_146_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_146_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyEvtId::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_146_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyEvtId::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_146_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyEvtId::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_146_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyEvtId::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MyEvtId", 674, G__eventdict_146_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyEvtId), -1, 0, 1, 1, 1, 0, "u 'MyEvtId' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyEvtId", 800, G__eventdict_146_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_146_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyEvtId), -1, 1, 1, 1, 1, 0, "u 'MyEvtId' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyL1Trig(void) {
   /* MyL1Trig */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyL1Trig));
   G__memfunc_setup("MyL1Trig",729,G__eventdict_147_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyL1Trig), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_147_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MyL1Trig::Class), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_147_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyL1Trig::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_147_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MyL1Trig::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_147_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MyL1Trig::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_147_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_147_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyL1Trig::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_147_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyL1Trig::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_147_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyL1Trig::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_147_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyL1Trig::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MyL1Trig", 729, G__eventdict_147_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyL1Trig), -1, 0, 1, 1, 1, 0, "u 'MyL1Trig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyL1Trig", 855, G__eventdict_147_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_147_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyL1Trig), -1, 1, 1, 1, 1, 0, "u 'MyL1Trig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyPart(void) {
   /* MyPart */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart));
   G__memfunc_setup("MyPart",605,G__eventdict_201_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyPart), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vmpi",444,G__eventdict_201_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_201_0_3, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MyPart::Class), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_201_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyPart::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_201_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MyPart::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_201_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MyPart::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_201_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_201_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyPart::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_201_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyPart::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_201_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyPart::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_201_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyPart::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MyPart", 605, G__eventdict_201_0_15, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyPart), -1, 0, 1, 1, 1, 0, "u 'MyPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyPart", 731, G__eventdict_201_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_201_0_17, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyPart), -1, 1, 1, 1, 1, 0, "u 'MyPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyGenKin(void) {
   /* MyGenKin */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenKin));
   G__memfunc_setup("MyGenKin",770,G__eventdict_202_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyGenKin), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_202_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MyGenKin::Class), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_202_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyGenKin::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_202_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MyGenKin::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_202_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MyGenKin::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_202_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_202_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyGenKin::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_202_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyGenKin::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_202_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyGenKin::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_202_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyGenKin::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MyGenKin", 770, G__eventdict_202_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyGenKin), -1, 0, 1, 1, 1, 0, "u 'MyGenKin' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyGenKin", 896, G__eventdict_202_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_202_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyGenKin), -1, 1, 1, 1, 1, 0, "u 'MyGenKin' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyGenPart(void) {
   /* MyGenPart */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart));
   G__memfunc_setup("MyGenPart",887,G__eventdict_203_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_203_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MyGenPart::Class), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_203_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyGenPart::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_203_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MyGenPart::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_203_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MyGenPart::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_203_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_203_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyGenPart::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_203_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyGenPart::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_203_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyGenPart::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_203_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyGenPart::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MyGenPart", 887, G__eventdict_203_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 0, 1, 1, 1, 0, "u 'MyGenPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyGenPart", 1013, G__eventdict_203_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_203_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 1, 1, 1, 0, "u 'MyGenPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyGenJet(void) {
   /* MyGenJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenJet));
   G__memfunc_setup("MyGenJet",771,G__eventdict_204_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_204_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MyGenJet::Class), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_204_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyGenJet::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_204_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MyGenJet::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_204_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MyGenJet::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_204_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_204_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyGenJet::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_204_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyGenJet::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_204_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyGenJet::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_204_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyGenJet::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MyGenJet", 771, G__eventdict_204_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 0, 1, 1, 1, 0, "u 'MyGenJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyGenJet", 897, G__eventdict_204_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_204_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 1, 1, 1, 1, 0, "u 'MyGenJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR(void) {
   /* vector<MyGenPart,allocator<MyGenPart> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_206_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 1, 1, 1, 0, "h - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_206_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_206_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_206_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_206_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_206_0_6, 104, -1, G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_206_0_7, 104, -1, G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_206_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_206_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - sz u 'MyGenPart' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_206_0_10, 104, -1, G__defined_typename("vector<MyGenPart,allocator<MyGenPart> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_206_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_206_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 1, 1, 1, 0, "h - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_206_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_206_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n u 'MyGenPart' - 11 'MyGenPart()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_206_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenPart,allocator<MyGenPart> >",3714,G__eventdict_206_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - first u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_206_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_206_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_206_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_206_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenPart), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_206_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyGenPart' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_206_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_206_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position u 'MyGenPart' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_206_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - first "
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' 'vector<MyGenPart,allocator<MyGenPart> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_206_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position h - 'vector<MyGenPart,allocator<MyGenPart> >::size_type' 0 - n "
"u 'MyGenPart' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_206_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_206_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_206_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - first u 'vector<MyGenPart,allocator<MyGenPart> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_206_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyGenPart,allocator<MyGenPart> >", 3840, G__eventdict_206_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyBeamSpot(void) {
   /* MyBeamSpot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot));
   G__memfunc_setup("MyBeamSpot",993,G__eventdict_209_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_209_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MyBeamSpot::Class), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_209_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyBeamSpot::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_209_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MyBeamSpot::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_209_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MyBeamSpot::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_209_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_209_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyBeamSpot::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_209_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyBeamSpot::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_209_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyBeamSpot::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_209_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyBeamSpot::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MyBeamSpot", 993, G__eventdict_209_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), -1, 0, 1, 1, 1, 0, "u 'MyBeamSpot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyBeamSpot", 1119, G__eventdict_209_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_209_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot), -1, 1, 1, 1, 1, 0, "u 'MyBeamSpot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyVertex(void) {
   /* MyVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyVertex));
   G__memfunc_setup("MyVertex",836,G__eventdict_210_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_210_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MyVertex::Class), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_210_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyVertex::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_210_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MyVertex::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_210_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MyVertex::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_210_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_210_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyVertex::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_210_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyVertex::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_210_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyVertex::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_210_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyVertex::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MyVertex", 836, G__eventdict_210_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 0, 1, 1, 1, 0, "u 'MyVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyVertex", 962, G__eventdict_210_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_210_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 1, 1, 1, 0, "u 'MyVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyTracks(void) {
   /* MyTracks */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyTracks));
   G__memfunc_setup("MyTracks",814,G__eventdict_211_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyTracks), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_211_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MyTracks::Class), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_211_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyTracks::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_211_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MyTracks::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_211_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MyTracks::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_211_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_211_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyTracks::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_211_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyTracks::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_211_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyTracks::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_211_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyTracks::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MyTracks", 814, G__eventdict_211_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyTracks), -1, 0, 1, 1, 1, 0, "u 'MyTracks' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyTracks", 940, G__eventdict_211_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_211_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyTracks), -1, 1, 1, 1, 1, 0, "u 'MyTracks' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyElectron(void) {
   /* MyElectron */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyElectron));
   G__memfunc_setup("MyElectron",1026,G__eventdict_216_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_216_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MyElectron::Class), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_216_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyElectron::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_216_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MyElectron::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_216_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MyElectron::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_216_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_216_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyElectron::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_216_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyElectron::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_216_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyElectron::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_216_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyElectron::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MyElectron", 1026, G__eventdict_216_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 0, 1, 1, 1, 0, "u 'MyElectron' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyElectron", 1152, G__eventdict_216_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_216_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 1, 1, 1, 1, 0, "u 'MyElectron' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMyMuon(void) {
   /* MyMuon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_MyMuon));
   G__memfunc_setup("MyMuon",613,G__eventdict_217_0_1, 105, G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__eventdict_217_0_2, 85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&MyMuon::Class), 0);
   G__memfunc_setup("Class_Name",982,G__eventdict_217_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyMuon::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__eventdict_217_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&MyMuon::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__eventdict_217_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&MyMuon::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__eventdictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__eventdict_217_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__eventdict_217_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyMuon::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__eventdict_217_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyMuon::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__eventdict_217_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&MyMuon::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__eventdict_217_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&MyMuon::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("MyMuon", 613, G__eventdict_217_0_14, (int) ('i'), G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 0, 1, 1, 1, 0, "u 'MyMuon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MyMuon", 739, G__eventdict_217_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__eventdict_217_0_16, (int) ('u'), G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 1, 1, 1, 1, 0, "u 'MyMuon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR(void) {
   /* vector<MyGenJet,allocator<MyGenJet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_219_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 1, 1, 1, 1, 0, "h - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_219_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_219_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_219_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_219_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_219_0_6, 104, -1, G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_219_0_7, 104, -1, G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_219_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_219_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - sz u 'MyGenJet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_219_0_10, 104, -1, G__defined_typename("vector<MyGenJet,allocator<MyGenJet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_219_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_219_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 1, 1, 1, 1, 0, "h - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenJet,allocator<MyGenJet> >",3482,G__eventdict_219_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenJet,allocator<MyGenJet> >",3482,G__eventdict_219_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n u 'MyGenJet' - 11 'MyGenJet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenJet,allocator<MyGenJet> >",3482,G__eventdict_219_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyGenJet,allocator<MyGenJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyGenJet,allocator<MyGenJet> >",3482,G__eventdict_219_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' 'vector<MyGenJet,allocator<MyGenJet> >::const_iterator' 10 - first u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' 'vector<MyGenJet,allocator<MyGenJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_219_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyGenJet,allocator<MyGenJet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_219_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_219_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_219_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyGenJet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_219_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyGenJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_219_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenJet,allocator<MyGenJet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_219_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - position u 'MyGenJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_219_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - position u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' 'vector<MyGenJet,allocator<MyGenJet> >::const_iterator' 10 - first "
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' 'vector<MyGenJet,allocator<MyGenJet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_219_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - position h - 'vector<MyGenJet,allocator<MyGenJet> >::size_type' 0 - n "
"u 'MyGenJet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_219_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_219_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_219_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - first u 'vector<MyGenJet,allocator<MyGenJet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_219_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyGenJet,allocator<MyGenJet> >", 3608, G__eventdict_219_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyVertexcOallocatorlEMyVertexgRsPgR(void) {
   /* vector<MyVertex,allocator<MyVertex> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_223_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 1, 1, 1, 0, "h - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_223_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_223_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_223_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_223_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyVertex,allocator<MyVertex> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_223_0_6, 104, -1, G__defined_typename("vector<MyVertex,allocator<MyVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_223_0_7, 104, -1, G__defined_typename("vector<MyVertex,allocator<MyVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_223_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_223_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - sz u 'MyVertex' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_223_0_10, 104, -1, G__defined_typename("vector<MyVertex,allocator<MyVertex> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_223_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_223_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 1, 1, 1, 0, "h - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_223_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_223_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n u 'MyVertex' - 11 'MyVertex()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_223_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyVertex,allocator<MyVertex> >",3612,G__eventdict_223_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - first u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_223_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_223_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_223_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_223_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyVertex), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_223_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_223_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_223_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position u 'MyVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_223_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - first "
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' 'vector<MyVertex,allocator<MyVertex> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_223_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position h - 'vector<MyVertex,allocator<MyVertex> >::size_type' 0 - n "
"u 'MyVertex' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_223_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_223_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_223_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - first u 'vector<MyVertex,allocator<MyVertex> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_223_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyVertex,allocator<MyVertex> >", 3738, G__eventdict_223_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyTrackscOallocatorlEMyTracksgRsPgR(void) {
   /* vector<MyTracks,allocator<MyTracks> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR));
   G__memfunc_setup("at",213,G__eventdict_227_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyTracks), -1, 1, 1, 1, 1, 0, "h - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_227_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_227_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_227_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyTracks,allocator<MyTracks> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_227_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR), G__defined_typename("vector<MyTracks,allocator<MyTracks> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_227_0_6, 104, -1, G__defined_typename("vector<MyTracks,allocator<MyTracks> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_227_0_7, 104, -1, G__defined_typename("vector<MyTracks,allocator<MyTracks> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_227_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_227_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - sz u 'MyTracks' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_227_0_10, 104, -1, G__defined_typename("vector<MyTracks,allocator<MyTracks> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_227_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_227_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyTracks), -1, 1, 1, 1, 1, 0, "h - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTracks,allocator<MyTracks> >",3568,G__eventdict_227_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTracks,allocator<MyTracks> >",3568,G__eventdict_227_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - n u 'MyTracks' - 11 'MyTracks()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTracks,allocator<MyTracks> >",3568,G__eventdict_227_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyTracks,allocator<MyTracks> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyTracks,allocator<MyTracks> >",3568,G__eventdict_227_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTracks,allocator<MyTracks> >::iterator' 'vector<MyTracks,allocator<MyTracks> >::const_iterator' 10 - first u 'vector<MyTracks,allocator<MyTracks> >::iterator' 'vector<MyTracks,allocator<MyTracks> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_227_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyTracks,allocator<MyTracks> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_227_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_227_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyTracks), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_227_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyTracks), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_227_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyTracks' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_227_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyTracks,allocator<MyTracks> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_227_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTracks,allocator<MyTracks> >::iterator' - 0 - position u 'MyTracks' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_227_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyTracks,allocator<MyTracks> >::iterator' - 0 - position u 'vector<MyTracks,allocator<MyTracks> >::iterator' 'vector<MyTracks,allocator<MyTracks> >::const_iterator' 10 - first "
"u 'vector<MyTracks,allocator<MyTracks> >::iterator' 'vector<MyTracks,allocator<MyTracks> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_227_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyTracks,allocator<MyTracks> >::iterator' - 0 - position h - 'vector<MyTracks,allocator<MyTracks> >::size_type' 0 - n "
"u 'MyTracks' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_227_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_227_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyTracks,allocator<MyTracks> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_227_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyTracks,allocator<MyTracks> >::iterator' - 0 - first u 'vector<MyTracks,allocator<MyTracks> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_227_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyTracks,allocator<MyTracks> >", 3694, G__eventdict_227_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyElectroncOallocatorlEMyElectrongRsPgR(void) {
   /* vector<MyElectron,allocator<MyElectron> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR));
   G__memfunc_setup("at",213,G__eventdict_231_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 1, 1, 1, 1, 0, "h - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_231_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_231_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_231_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR), G__defined_typename("vector<MyElectron,allocator<MyElectron> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_231_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR), G__defined_typename("vector<MyElectron,allocator<MyElectron> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_231_0_6, 104, -1, G__defined_typename("vector<MyElectron,allocator<MyElectron> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_231_0_7, 104, -1, G__defined_typename("vector<MyElectron,allocator<MyElectron> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_231_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_231_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - sz u 'MyElectron' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_231_0_10, 104, -1, G__defined_typename("vector<MyElectron,allocator<MyElectron> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_231_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_231_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 1, 1, 1, 1, 0, "h - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyElectron,allocator<MyElectron> >",3992,G__eventdict_231_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyElectron,allocator<MyElectron> >",3992,G__eventdict_231_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n u 'MyElectron' - 11 'MyElectron()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyElectron,allocator<MyElectron> >",3992,G__eventdict_231_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyElectron,allocator<MyElectron> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyElectron,allocator<MyElectron> >",3992,G__eventdict_231_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' 'vector<MyElectron,allocator<MyElectron> >::const_iterator' 10 - first u 'vector<MyElectron,allocator<MyElectron> >::iterator' 'vector<MyElectron,allocator<MyElectron> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_231_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyElectron,allocator<MyElectron> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_231_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_231_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_231_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyElectron), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_231_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyElectron' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_231_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyElectron,allocator<MyElectron> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_231_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - position u 'MyElectron' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_231_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - position u 'vector<MyElectron,allocator<MyElectron> >::iterator' 'vector<MyElectron,allocator<MyElectron> >::const_iterator' 10 - first "
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' 'vector<MyElectron,allocator<MyElectron> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_231_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - position h - 'vector<MyElectron,allocator<MyElectron> >::size_type' 0 - n "
"u 'MyElectron' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_231_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_231_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_231_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - first u 'vector<MyElectron,allocator<MyElectron> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_231_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyElectron,allocator<MyElectron> >", 4118, G__eventdict_231_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEMyMuoncOallocatorlEMyMuongRsPgR(void) {
   /* vector<MyMuon,allocator<MyMuon> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR));
   G__memfunc_setup("at",213,G__eventdict_235_0_1, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 1, 1, 1, 1, 0, "h - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__eventdict_235_0_2, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__eventdict_235_0_3, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__eventdict_235_0_4, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR), G__defined_typename("vector<MyMuon,allocator<MyMuon> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__eventdict_235_0_5, 117, G__get_linked_tagnum(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR), G__defined_typename("vector<MyMuon,allocator<MyMuon> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__eventdict_235_0_6, 104, -1, G__defined_typename("vector<MyMuon,allocator<MyMuon> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__eventdict_235_0_7, 104, -1, G__defined_typename("vector<MyMuon,allocator<MyMuon> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_235_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__eventdict_235_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - sz u 'MyMuon' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__eventdict_235_0_10, 104, -1, G__defined_typename("vector<MyMuon,allocator<MyMuon> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__eventdict_235_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__eventdict_235_0_12, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 1, 1, 1, 1, 0, "h - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMuon,allocator<MyMuon> >",3166,G__eventdict_235_0_13, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMuon,allocator<MyMuon> >",3166,G__eventdict_235_0_14, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n u 'MyMuon' - 11 'MyMuon()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMuon,allocator<MyMuon> >",3166,G__eventdict_235_0_15, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<MyMuon,allocator<MyMuon> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<MyMuon,allocator<MyMuon> >",3166,G__eventdict_235_0_16, 105, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' 'vector<MyMuon,allocator<MyMuon> >::const_iterator' 10 - first u 'vector<MyMuon,allocator<MyMuon> >::iterator' 'vector<MyMuon,allocator<MyMuon> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__eventdict_235_0_17, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<MyMuon,allocator<MyMuon> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__eventdict_235_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__eventdict_235_0_19, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__eventdict_235_0_20, 117, G__get_linked_tagnum(&G__eventdictLN_MyMuon), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__eventdict_235_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MyMuon' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__eventdict_235_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyMuon,allocator<MyMuon> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_235_0_23, 117, G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - position u 'MyMuon' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_235_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - position u 'vector<MyMuon,allocator<MyMuon> >::iterator' 'vector<MyMuon,allocator<MyMuon> >::const_iterator' 10 - first "
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' 'vector<MyMuon,allocator<MyMuon> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__eventdict_235_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - position h - 'vector<MyMuon,allocator<MyMuon> >::size_type' 0 - n "
"u 'MyMuon' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__eventdict_235_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_235_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__eventdict_235_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - first u 'vector<MyMuon,allocator<MyMuon> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__eventdict_235_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<MyMuon,allocator<MyMuon> >", 3292, G__eventdict_235_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunceventdict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globaleventdict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funceventdict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__eventdictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyEvtId = { "MyEvtId" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyL1Trig = { "MyL1Trig" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyPart = { "MyPart" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyGenKin = { "MyGenKin" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyGenPart = { "MyGenPart" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyGenJet = { "MyGenJet" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR = { "vector<MyGenPart,allocator<MyGenPart> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator = { "vector<MyGenPart,allocator<MyGenPart> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyGenPart,allocator<MyGenPart> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyBeamSpot = { "MyBeamSpot" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyVertex = { "MyVertex" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyTracks = { "MyTracks" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyElectron = { "MyElectron" , 99 , -1 };
G__linked_taginfo G__eventdictLN_MyMuon = { "MyMuon" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR = { "vector<MyGenJet,allocator<MyGenJet> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator = { "vector<MyGenJet,allocator<MyGenJet> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyGenJet,allocator<MyGenJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR = { "vector<MyVertex,allocator<MyVertex> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator = { "vector<MyVertex,allocator<MyVertex> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyVertex,allocator<MyVertex> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR = { "vector<MyTracks,allocator<MyTracks> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiterator = { "vector<MyTracks,allocator<MyTracks> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyTracks,allocator<MyTracks> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR = { "vector<MyElectron,allocator<MyElectron> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator = { "vector<MyElectron,allocator<MyElectron> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyElectron,allocator<MyElectron> >::iterator>" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR = { "vector<MyMuon,allocator<MyMuon> >" , 99 , -1 };
G__linked_taginfo G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator = { "vector<MyMuon,allocator<MyMuon> >::iterator" , 99 , -1 };
G__linked_taginfo G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MyMuon,allocator<MyMuon> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableeventdict() {
  G__eventdictLN_TClass.tagnum = -1 ;
  G__eventdictLN_TBuffer.tagnum = -1 ;
  G__eventdictLN_TMemberInspector.tagnum = -1 ;
  G__eventdictLN_TObject.tagnum = -1 ;
  G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__eventdictLN_string.tagnum = -1 ;
  G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_MyEvtId.tagnum = -1 ;
  G__eventdictLN_MyL1Trig.tagnum = -1 ;
  G__eventdictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__eventdictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__eventdictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__eventdictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__eventdictLN_TLorentzVector.tagnum = -1 ;
  G__eventdictLN_MyPart.tagnum = -1 ;
  G__eventdictLN_MyGenKin.tagnum = -1 ;
  G__eventdictLN_MyGenPart.tagnum = -1 ;
  G__eventdictLN_MyGenJet.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_MyBeamSpot.tagnum = -1 ;
  G__eventdictLN_MyVertex.tagnum = -1 ;
  G__eventdictLN_MyTracks.tagnum = -1 ;
  G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_MyElectron.tagnum = -1 ;
  G__eventdictLN_MyMuon.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR.tagnum = -1 ;
  G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator.tagnum = -1 ;
  G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableeventdict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__eventdictLN_TClass);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TObject);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_string);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_MyEvtId),sizeof(MyEvtId),-1,292096,(char*)NULL,G__setup_memvarMyEvtId,G__setup_memfuncMyEvtId);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_MyL1Trig),sizeof(MyL1Trig),-1,292096,(char*)NULL,G__setup_memvarMyL1Trig,G__setup_memfuncMyL1Trig);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_TLorentzVector);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_MyPart),sizeof(MyPart),-1,292096,(char*)NULL,G__setup_memvarMyPart,G__setup_memfuncMyPart);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenKin),sizeof(MyGenKin),-1,292096,(char*)NULL,G__setup_memvarMyGenKin,G__setup_memfuncMyGenKin);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenPart),sizeof(MyGenPart),-1,292096,(char*)NULL,G__setup_memvarMyGenPart,G__setup_memfuncMyGenPart);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_MyGenJet),sizeof(MyGenJet),-1,292096,(char*)NULL,G__setup_memvarMyGenJet,G__setup_memfuncMyGenJet);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR),sizeof(vector<MyGenPart,allocator<MyGenPart> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR,G__setup_memfuncvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenPartcOallocatorlEMyGenPartgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_MyBeamSpot),sizeof(MyBeamSpot),-1,292096,(char*)NULL,G__setup_memvarMyBeamSpot,G__setup_memfuncMyBeamSpot);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_MyVertex),sizeof(MyVertex),-1,292096,(char*)NULL,G__setup_memvarMyVertex,G__setup_memfuncMyVertex);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_MyTracks),sizeof(MyTracks),-1,292096,(char*)NULL,G__setup_memvarMyTracks,G__setup_memfuncMyTracks);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_MyElectron),sizeof(MyElectron),-1,292096,(char*)NULL,G__setup_memvarMyElectron,G__setup_memfuncMyElectron);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_MyMuon),sizeof(MyMuon),-1,292096,(char*)NULL,G__setup_memvarMyMuon,G__setup_memfuncMyMuon);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR),sizeof(vector<MyGenJet,allocator<MyGenJet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR,G__setup_memfuncvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyGenJetcOallocatorlEMyGenJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgR),sizeof(vector<MyVertex,allocator<MyVertex> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyVertexcOallocatorlEMyVertexgRsPgR,G__setup_memfuncvectorlEMyVertexcOallocatorlEMyVertexgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyVertexcOallocatorlEMyVertexgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgR),sizeof(vector<MyTracks,allocator<MyTracks> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyTrackscOallocatorlEMyTracksgRsPgR,G__setup_memfuncvectorlEMyTrackscOallocatorlEMyTracksgRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyTrackscOallocatorlEMyTracksgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgR),sizeof(vector<MyElectron,allocator<MyElectron> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyElectroncOallocatorlEMyElectrongRsPgR,G__setup_memfuncvectorlEMyElectroncOallocatorlEMyElectrongRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyElectroncOallocatorlEMyElectrongRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgR),sizeof(vector<MyMuon,allocator<MyMuon> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEMyMuoncOallocatorlEMyMuongRsPgR,G__setup_memfuncvectorlEMyMuoncOallocatorlEMyMuongRsPgR);
   G__get_linked_tagnum_fwd(&G__eventdictLN_vectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__eventdictLN_reverse_iteratorlEvectorlEMyMuoncOallocatorlEMyMuongRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupeventdict(void) {
  G__check_setup_version(30051515,"G__cpp_setupeventdict()");
  G__set_cpp_environmenteventdict();
  G__cpp_setup_tagtableeventdict();

  G__cpp_setup_inheritanceeventdict();

  G__cpp_setup_typetableeventdict();

  G__cpp_setup_memvareventdict();

  G__cpp_setup_memfunceventdict();
  G__cpp_setup_globaleventdict();
  G__cpp_setup_funceventdict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunceventdict();
  return;
}
class G__cpp_setup_initeventdict {
  public:
    G__cpp_setup_initeventdict() { G__add_setup_func("eventdict",(G__incsetup)(&G__cpp_setupeventdict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initeventdict() { G__remove_setup_func("eventdict"); }
};
G__cpp_setup_initeventdict G__cpp_setup_initializereventdict;

